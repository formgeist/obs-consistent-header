import { ChartTypes } from '../chart_types';
import { SeriesIdentifier } from '../chart_types/xy_chart/utils/series';
import { Spec, PointerEvent } from '../specs';
import { Dimensions } from '../utils/dimensions';
import { Point } from '../utils/point';
import { LegendItem } from '../chart_types/xy_chart/legend/legend';
import { TooltipLegendValue } from '../chart_types/xy_chart/tooltip/tooltip';
import { StateActions } from './actions';
import { RefObject } from 'react';
import { Stage } from 'react-konva';
export declare type BackwardRef = () => React.RefObject<HTMLDivElement>;
/**
 * A set of chart-type-dependant functions that are required and called
 * globally by the <ChartContainer> and
 */
export interface InternalChartState {
    chartType: ChartTypes;
    chartRenderer(containerRef: BackwardRef, forwardStageRef: RefObject<Stage>): JSX.Element | null;
    isBrushAvailable(globalState: GlobalChartState): boolean;
    isBrushing(globalState: GlobalChartState): boolean;
    isChartEmpty(globalState: GlobalChartState): boolean;
    getLegendItems(globalState: GlobalChartState): Map<string, LegendItem>;
    getLegendItemsValues(globalState: GlobalChartState): Map<string, TooltipLegendValue>;
    getPointerCursor(globalState: GlobalChartState): string;
}
export interface SpecList {
    [specId: string]: Spec;
}
export interface PointerState {
    position: Point;
    time: number;
}
export interface DragState {
    start: PointerState;
    end: PointerState;
}
export interface PointerStates {
    dragging: boolean;
    current: PointerState;
    down: PointerState | null;
    up: PointerState | null;
    lastDrag: DragState | null;
    lastClick: PointerState | null;
}
export interface InteractionsState {
    pointer: PointerStates;
    highlightedLegendItemKey: string | null;
    legendCollapsed: boolean;
    invertDeselect: boolean;
    deselectedDataSeries: SeriesIdentifier[];
}
export interface ExternalEventsState {
    pointer: PointerEvent | null;
}
export interface GlobalChartState {
    chartId: string;
    specsInitialized: boolean;
    chartRendered: boolean;
    chartRenderedCount: number;
    specs: SpecList;
    chartType: ChartTypes | null;
    internalChartState: InternalChartState | null;
    parentDimensions: Dimensions;
    interactions: InteractionsState;
    externalEvents: ExternalEventsState;
}
export declare const getInitialState: (chartId: string) => GlobalChartState;
export declare const chartStoreReducer: (chartId: string) => (state: GlobalChartState | undefined, action: StateActions) => GlobalChartState;
