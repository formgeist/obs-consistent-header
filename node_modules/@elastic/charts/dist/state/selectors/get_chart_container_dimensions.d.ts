import { GlobalChartState } from '../chart_state';
import { Dimensions } from '../../utils/dimensions';
export declare const getChartContainerDimensionsSelector: import("re-reselect").Selector<GlobalChartState, Dimensions> & {
    resultFunc: (res1: import("../..").SettingsSpec, res2: import("../../utils/bbox/bbox_calculator").BBox, res3: Dimensions) => Dimensions;
    dependencies: [import("re-reselect").Selector<GlobalChartState, import("../..").SettingsSpec>, import("re-reselect").Selector<GlobalChartState, import("../../utils/bbox/bbox_calculator").BBox>, import("re-reselect").Selector<GlobalChartState, Dimensions>];
    recomputations: () => number;
    resetRecomputations: () => number;
} & {
    getMatchingSelector: (state: GlobalChartState, ...args: any[]) => import("re-reselect").OutputSelector<GlobalChartState, Dimensions, (res1: import("../..").SettingsSpec, res2: import("../../utils/bbox/bbox_calculator").BBox, res3: Dimensions) => Dimensions, [import("re-reselect").Selector<GlobalChartState, import("../..").SettingsSpec>, import("re-reselect").Selector<GlobalChartState, import("../../utils/bbox/bbox_calculator").BBox>, import("re-reselect").Selector<GlobalChartState, Dimensions>]>;
    removeMatchingSelector: (state: GlobalChartState, ...args: any[]) => void;
    clearCache: () => void;
    cache: import("re-reselect").ICacheObject;
    keySelector: import("re-reselect").KeySelector<GlobalChartState>;
};
