import { BBox } from '../../utils/bbox/bbox_calculator';
import { GlobalChartState } from '../chart_state';
export declare const getLegendSizeSelector: import("re-reselect").Selector<GlobalChartState, BBox> & {
    resultFunc: (res1: import("../..").SettingsSpec, res2: import("../..").Theme, res3: import("../../utils/dimensions").Dimensions, res4: string[]) => BBox;
    dependencies: [import("re-reselect").Selector<GlobalChartState, import("../..").SettingsSpec>, import("re-reselect").Selector<GlobalChartState, import("../..").Theme>, import("re-reselect").Selector<GlobalChartState, import("../../utils/dimensions").Dimensions>, import("re-reselect").Selector<GlobalChartState, string[]>];
    recomputations: () => number;
    resetRecomputations: () => number;
} & {
    getMatchingSelector: (state: GlobalChartState, ...args: any[]) => import("re-reselect").OutputSelector<GlobalChartState, BBox, (res1: import("../..").SettingsSpec, res2: import("../..").Theme, res3: import("../../utils/dimensions").Dimensions, res4: string[]) => BBox, [import("re-reselect").Selector<GlobalChartState, import("../..").SettingsSpec>, import("re-reselect").Selector<GlobalChartState, import("../..").Theme>, import("re-reselect").Selector<GlobalChartState, import("../../utils/dimensions").Dimensions>, import("re-reselect").Selector<GlobalChartState, string[]>]>;
    removeMatchingSelector: (state: GlobalChartState, ...args: any[]) => void;
    clearCache: () => void;
    cache: import("re-reselect").ICacheObject;
    keySelector: import("re-reselect").KeySelector<GlobalChartState>;
};
