import { Distance, Pixels, Radian, Radius, Ratio, SizeRatio, TimeMs } from './geometry_types';
import { Color, Font, FontFamily, PartialFont } from './types';
import { $Values as Values } from 'utility-types';
export declare const PartitionLayout: Readonly<{
    sunburst: string;
    treemap: string;
}>;
export declare type PartitionLayout = Values<typeof PartitionLayout>;
interface LabelConfig extends Font {
    textColor: Color;
    textInvertible: boolean;
    textOpacity: Ratio;
    valueFormatter: (x: number) => string;
    valueFont: PartialFont;
}
export declare type FillLabelConfig = LabelConfig;
export interface LinkLabelConfig extends LabelConfig {
    fontSize: Pixels;
    maximumSection: Distance;
    gap: Pixels;
    spacing: Pixels;
    minimumStemLength: Distance;
    stemAngle: Radian;
    horizontalStemLength: Distance;
    radiusPadding: Distance;
    lineWidth: Pixels;
    maxCount: number;
}
export interface StaticConfig {
    width: number;
    height: number;
    margin: {
        left: SizeRatio;
        right: SizeRatio;
        top: SizeRatio;
        bottom: SizeRatio;
    };
    emptySizeRatio: SizeRatio;
    outerSizeRatio: SizeRatio;
    clockwiseSectors: boolean;
    specialFirstInnermostSector: boolean;
    partitionLayout: PartitionLayout;
    fontFamily: FontFamily;
    minFontSize: Pixels;
    maxFontSize: Pixels;
    idealFontSizeJump: Ratio;
    circlePadding: Distance;
    radialPadding: Distance;
    horizontalTextAngleThreshold: Radian;
    horizontalTextEnforcer: Ratio;
    maxRowCount: number;
    fillOutside: boolean;
    radiusOutside: Radius;
    fillRectangleWidth: Distance;
    fillRectangleHeight: Distance;
    fillLabel: FillLabelConfig;
    linkLabel: LinkLabelConfig;
    backgroundColor: Color;
    sectorLineWidth: Pixels;
}
export declare type EasingFunction = (x: Ratio) => Ratio;
export interface AnimKeyframe {
    time: number;
    easingFunction: EasingFunction;
    keyframeConfig: Partial<StaticConfig>;
}
export interface Config extends StaticConfig {
    animation: {
        duration: TimeMs;
        keyframes: Array<AnimKeyframe>;
    };
}
declare class Type<A> {
    dflt: A;
    reconfigurable: boolean | string;
    documentation: string;
    constructor(dflt: A, reconfigurable: boolean | string, documentation: string);
}
export declare class Numeric extends Type<number> {
    min: number;
    max: number;
    type: string;
    constructor({ dflt, min, max, reconfigurable, documentation, }: {
        dflt: number;
        min: number;
        max: number;
        reconfigurable: boolean | string;
        documentation: string;
    });
}
export {};
