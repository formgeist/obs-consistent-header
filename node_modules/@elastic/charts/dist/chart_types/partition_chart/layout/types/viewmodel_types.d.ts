import { Config } from './config_types';
import { Coordinate, Distance, PointObject, PointTuple, Radian } from './geometry_types';
import { Color, Font } from './types';
import { ArrayNode } from '../utils/group_by_rollup';
export declare type LinkLabelVM = {
    link: [PointTuple, ...PointTuple[]];
    translate: [number, number];
    textAlign: CanvasTextAlign;
    text: string;
    valueText: string;
    width: Distance;
    verticalOffset: Distance;
};
export interface RowBox extends Font {
    text: string;
    width: Distance;
    verticalOffset: Distance;
    wordBeginning: Distance;
}
interface RowCentroid {
    rowCentroidX: Coordinate;
    rowCentroidY: Coordinate;
}
export interface RowSpace extends RowCentroid {
    maximumRowLength: Distance;
}
export interface TextRow extends RowCentroid {
    length: number;
    maximumLength: number;
    rowWords: Array<RowBox>;
}
export interface RowSet {
    id: string;
    rows: Array<TextRow>;
    fillTextColor: string;
    fontSize: number;
    rotation: Radian;
}
export interface QuadViewModel extends ShapeTreeNode {
    strokeWidth: number;
    fillColor: string;
}
export interface OutsideLinksViewModel {
    points: Array<PointTuple>;
}
export declare type ShapeViewModel = {
    config: Config;
    quadViewModel: QuadViewModel[];
    rowSets: RowSet[];
    linkLabelViewModels: LinkLabelVM[];
    outsideLinksViewModel: OutsideLinksViewModel[];
    diskCenter: PointObject;
};
export declare const nullSectorViewModel: () => ShapeViewModel;
declare type TreeLevel = number;
interface AngleFromTo {
    x0: Radian;
    x1: Radian;
}
export interface TreeNode extends AngleFromTo {
    x0: Radian;
    x1: Radian;
    y0: TreeLevel;
    y1: TreeLevel;
    fill?: Color;
}
interface SectorGeomSpecY {
    y0px: Distance;
    y1px: Distance;
}
export interface ShapeTreeNode extends TreeNode, SectorGeomSpecY {
    yMidPx: Distance;
    depth: number;
    sortIndex: number;
    dataName: any;
    value: number;
    parent: ArrayNode;
}
export declare type RawTextGetter = (node: ShapeTreeNode) => string;
export declare type ValueFormatter = (value: number) => string;
export {};
