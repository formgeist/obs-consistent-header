import { Config, Numeric } from '../types/config_types';
declare function defaultFormatter(d: any): string;
export declare const configMetadata: {
    width: {
        dflt: number;
        min: number;
        max: number;
        type: string;
        reconfigurable: boolean;
    };
    height: {
        dflt: number;
        min: number;
        max: number;
        type: string;
        reconfigurable: boolean;
    };
    margin: {
        type: string;
        values: {
            left: {
                dflt: number;
                min: number;
                max: number;
                type: string;
            };
            right: {
                dflt: number;
                min: number;
                max: number;
                type: string;
            };
            top: {
                dflt: number;
                min: number;
                max: number;
                type: string;
            };
            bottom: {
                dflt: number;
                min: number;
                max: number;
                type: string;
            };
        };
    };
    outerSizeRatio: Numeric;
    emptySizeRatio: Numeric;
    clockwiseSectors: {
        dflt: boolean;
        type: string;
        documentation: string;
    };
    specialFirstInnermostSector: {
        dflt: boolean;
        type: string;
        documentation: string;
    };
    fontFamily: {
        dflt: string;
        type: string;
    };
    minFontSize: {
        dflt: number;
        min: number;
        max: number;
        type: string;
        reconfigurable: boolean;
    };
    maxFontSize: {
        dflt: number;
        min: number;
        max: number;
        type: string;
    };
    idealFontSizeJump: {
        dflt: number;
        min: number;
        max: number;
        type: string;
        reconfigurable: boolean;
    };
    partitionLayout: {
        dflt: string;
        type: string;
        values: string[];
    };
    circlePadding: {
        dflt: number;
        min: number;
        max: number;
        type: string;
    };
    radialPadding: {
        dflt: number;
        min: number;
        max: number;
        type: string;
    };
    horizontalTextAngleThreshold: {
        dflt: number;
        min: number;
        max: number;
        type: string;
    };
    horizontalTextEnforcer: {
        dflt: number;
        min: number;
        max: number;
        type: string;
    };
    maxRowCount: {
        dflt: number;
        min: number;
        max: number;
        type: string;
    };
    fillOutside: {
        dflt: boolean;
        type: string;
    };
    radiusOutside: {
        dflt: number;
        min: number;
        max: number;
        type: string;
    };
    fillRectangleWidth: {
        dflt: number;
        reconfigurable: boolean;
        type: string;
    };
    fillRectangleHeight: {
        dflt: number;
        reconfigurable: boolean;
        type: string;
    };
    fillLabel: {
        type: string;
        values: {
            textColor: {
                dflt: string;
                type: string;
            };
            textInvertible: {
                dflt: boolean;
                type: string;
            };
            fontWeight: {
                dflt: number;
                min: number;
                max: number;
                type: string;
            };
            fontStyle: {
                dflt: string;
                type: string;
                values: readonly ["normal", "italic", "oblique", "inherit", "initial", "unset"];
            };
            fontVariant: {
                dflt: string;
                type: string;
                values: readonly ["normal", "small-caps"];
            };
            valueFormatter: {
                dflt: typeof defaultFormatter;
                type: string;
            };
            valueFont: {
                type: string;
                values: {
                    fontWeight: {
                        dflt: number;
                        min: number;
                        max: number;
                        type: string;
                    };
                    fontStyle: {
                        dflt: string;
                        type: string;
                        values: readonly ["normal", "italic", "oblique", "inherit", "initial", "unset"];
                    };
                    fontVariant: {
                        dflt: string;
                        type: string;
                        values: readonly ["normal", "small-caps"];
                    };
                };
            };
        };
    };
    linkLabel: {
        type: string;
        values: {
            maximumSection: {
                dflt: number;
                min: number;
                max: number;
                type: string;
                reconfigurable: boolean;
                documentation: string;
            };
            fontSize: {
                dflt: number;
                min: number;
                max: number;
                type: string;
            };
            gap: {
                dflt: number;
                min: number;
                max: number;
                type: string;
            };
            spacing: {
                dflt: number;
                min: number;
                max: number;
                type: string;
            };
            horizontalStemLength: {
                dflt: number;
                min: number;
                max: number;
                type: string;
            };
            radiusPadding: {
                dflt: number;
                min: number;
                max: number;
                type: string;
            };
            lineWidth: {
                dflt: number;
                min: number;
                max: number;
                type: string;
            };
            maxCount: {
                dflt: number;
                min: number;
                max: number;
                type: string;
                documentation: string;
            };
            textColor: {
                dflt: string;
                type: string;
            };
            textInvertible: {
                dflt: boolean;
                type: string;
            };
            textOpacity: {
                dflt: number;
                min: number;
                max: number;
                type: string;
            };
            minimumStemLength: {
                dflt: number;
                min: number;
                max: number;
                type: string;
                reconfigurable: boolean;
            };
            stemAngle: {
                dflt: number;
                min: number;
                max: number;
                type: string;
                reconfigurable: boolean;
            };
            valueFont: {
                type: string;
                values: {
                    fontWeight: {
                        dflt: number;
                        min: number;
                        max: number;
                        type: string;
                    };
                    fontStyle: {
                        dflt: string;
                        type: string;
                        values: readonly ["normal", "italic", "oblique", "inherit", "initial", "unset"];
                    };
                    fontVariant: {
                        dflt: string;
                        type: string;
                        values: readonly ["normal", "small-caps"];
                    };
                };
            };
        };
    };
    backgroundColor: {
        dflt: string;
        type: string;
    };
    sectorLineWidth: {
        dflt: number;
        min: number;
        max: number;
        type: string;
    };
    colors: {
        dflt: string;
        type: string;
        values: string[];
    };
    palettes: {
        dflt: {
            CET2s: import("../utils/d3_utils").RgbTuple[];
            turbo: import("../utils/d3_utils").RgbTuple[];
        };
        type: string;
        reconfigurable: boolean;
    };
};
export declare const config: Config;
export {};
