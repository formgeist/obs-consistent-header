import { ChartTypes } from '../../index';
import { FunctionComponent } from 'react';
import { AccessorFn, IndexedAccessorFn } from '../../../utils/accessor';
import { Spec, SpecTypes } from '../../../specs/index';
import { Config, FillLabelConfig } from '../layout/types/config_types';
import { RecursivePartial } from '../../../utils/commons';
import { Datum } from '../../../utils/domain';
declare type ColorAccessor = (d: Datum, index: number, array: Datum[]) => string;
export interface Layer {
    groupByRollup: IndexedAccessorFn;
    nodeLabel?: (datum: Datum) => string;
    fillLabel?: Partial<FillLabelConfig>;
    shape?: {
        fillColor: string | ColorAccessor;
    };
}
export interface PartitionSpec extends Spec {
    specType: typeof SpecTypes.Series;
    chartType: typeof ChartTypes.Partition;
    config: RecursivePartial<Config>;
    data: Datum[];
    valueAccessor: AccessorFn;
    valueFormatter: AccessorFn;
    layers: Layer[];
}
declare type SpecRequiredProps = Pick<PartitionSpec, 'id' | 'data'>;
declare type SpecOptionalProps = Partial<Omit<PartitionSpec, 'chartType' | 'specType' | 'id' | 'data'>>;
export declare const Partition: FunctionComponent<SpecRequiredProps & SpecOptionalProps>;
export {};
