import { GlobalChartState } from '../../../../state/chart_state';
import { ShapeViewModel } from '../../layout/types/viewmodel_types';
export declare const partitionGeometries: import("re-reselect").Selector<GlobalChartState, ShapeViewModel> & {
    resultFunc: (res1: import("../../../../state/chart_state").SpecList, res2: import("../../../../utils/dimensions").Dimensions) => ShapeViewModel;
    dependencies: [import("re-reselect").Selector<GlobalChartState, import("../../../../state/chart_state").SpecList>, import("re-reselect").Selector<GlobalChartState, import("../../../../utils/dimensions").Dimensions>];
    recomputations: () => number;
    resetRecomputations: () => number;
} & {
    getMatchingSelector: (state: GlobalChartState, ...args: any[]) => import("re-reselect").OutputSelector<GlobalChartState, ShapeViewModel, (res1: import("../../../../state/chart_state").SpecList, res2: import("../../../../utils/dimensions").Dimensions) => ShapeViewModel, [import("re-reselect").Selector<GlobalChartState, import("../../../../state/chart_state").SpecList>, import("re-reselect").Selector<GlobalChartState, import("../../../../utils/dimensions").Dimensions>]>;
    removeMatchingSelector: (state: GlobalChartState, ...args: any[]) => void;
    clearCache: () => void;
    cache: import("re-reselect").ICacheObject;
    keySelector: import("re-reselect").KeySelector<GlobalChartState>;
};
