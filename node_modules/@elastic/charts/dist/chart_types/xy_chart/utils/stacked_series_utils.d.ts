import { DataSeries, DataSeriesDatum, RawDataSeries } from './series';
import { ScaleType } from '../../../utils/scales/scales';
interface StackedValues {
    values: number[];
    percent: number[];
    total: number;
}
export declare const datumXSortPredicate: (xScaleType: "linear" | "ordinal" | "log" | "sqrt" | "time") => (a: DataSeriesDatum<any>, b: DataSeriesDatum<any>) => number;
/**
 * Map each y value from a RawDataSeries on it's specific x value into,
 * ordering the stack based on the dataseries index.
 * @param dataseries
 */
export declare function getYValueStackMap(dataseries: RawDataSeries[], xValues: Set<string | number>): Map<string | number, number[]>;
/**
 * For each key of the yValueStackMap, it stacks the values one after the other,
 * summing the previous value to the next one.
 * @param yValueStackMap
 * @param scaleToExtent
 */
export declare function computeYStackedMapValues(yValueStackMap: Map<any, number[]>, scaleToExtent: boolean): Map<any, StackedValues>;
export declare function formatStackedDataSeriesValues(dataseries: RawDataSeries[], scaleToExtent: boolean, isPercentageMode: boolean, xValues: Set<string | number>, xScaleType: ScaleType): DataSeries[];
export {};
