/// <reference types="react" />
import { $Values } from 'utility-types';
import { Rotation } from './specs';
import { Dimensions } from '../../../utils/dimensions';
import { Accessor } from '../../../utils/accessor';
import { IndexedGeometry } from '../../../utils/geometry';
import { Datum } from '../../../utils/domain';
/** The type of tooltip to use */
export declare const TooltipType: Readonly<{
    /** Vertical cursor parallel to x axis */
    VerticalCursor: "vertical";
    /** Vertical and horizontal cursors */
    Crosshairs: "cross";
    /** Follor the mouse coordinates */
    Follow: "follow";
    /** Hide every tooltip */
    None: "none";
}>;
export declare type TooltipType = $Values<typeof TooltipType>;
export interface TooltipValue {
    name: string;
    value: any;
    color: string;
    isHighlighted: boolean;
    isXValue: boolean;
    seriesKey: string;
    yAccessor: Accessor;
    isVisible: boolean;
}
export interface TooltipProps {
    type?: TooltipType;
    snap?: boolean;
    headerFormatter?: TooltipValueFormatter;
}
export declare type TooltipValueFormatter = (data: TooltipValue) => JSX.Element | string;
export interface HighlightedElement {
    position: {
        x: number;
        y: number;
        width: number;
        height: number;
        type: 'rect' | 'circle';
    };
    value: Datum;
}
/**
 * Get the cursor position depending on the chart rotation
 * @param xPos x position relative to chart
 * @param yPos y position relative to chart
 * @param chartRotation the chart rotation
 * @param chartDimension the chart dimension
 */
export declare function getOrientedXPosition(xPos: number, yPos: number, chartRotation: Rotation, chartDimension: Dimensions): number;
export declare function getOrientedYPosition(xPos: number, yPos: number, chartRotation: Rotation, chartDimension: Dimensions): number;
export declare function isCrosshairTooltipType(type: TooltipType): boolean;
export declare function isFollowTooltipType(type: TooltipType): boolean;
export declare function areIndexedGeometryArraysEquals(arr1: IndexedGeometry[], arr2: IndexedGeometry[]): boolean;
export declare function areIndexedGeomsEquals(ig1: IndexedGeometry, ig2: IndexedGeometry): boolean;
export declare function isTooltipProps(config: TooltipType | TooltipProps): config is TooltipProps;
export declare function isTooltipType(config: TooltipType | TooltipProps): config is TooltipType;
