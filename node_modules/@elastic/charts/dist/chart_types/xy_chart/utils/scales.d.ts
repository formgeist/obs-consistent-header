import { GroupId } from '../../../utils/ids';
import { Scale } from '../../../utils/scales/scales';
import { XDomain } from '../domains/x_domain';
import { YDomain } from '../domains/y_domain';
import { FormattedDataSeries } from './series';
/**
 * Count the max number of bars in cluster value.
 * Doesn't take in consideration areas, lines or points.
 * @param stacked all the stacked formatted dataseries
 * @param nonStacked all the non-stacked formatted dataseries
 */
export declare function countBarsInCluster(stacked: FormattedDataSeries[], nonStacked: FormattedDataSeries[]): {
    nonStackedBarsInCluster: number;
    stackedBarsInCluster: number;
    totalBarsInCluster: number;
};
interface XScaleOptions {
    xDomain: XDomain;
    totalBarsInCluster: number;
    range: [number, number];
    barsPadding?: number;
    enableHistogramMode?: boolean;
    ticks?: number;
    integersOnly?: boolean;
}
/**
 * Compute the x scale used to align geometries to the x axis.
 * @param xDomain the x domain
 * @param totalBarsInCluster the total number of grouped series
 * @param axisLength the length of the x axis
 */
export declare function computeXScale(options: XScaleOptions): Scale;
interface YScaleOptions {
    yDomains: YDomain[];
    range: [number, number];
    ticks?: number;
    integersOnly?: boolean;
}
/**
 * Compute the y scales, one per groupId for the y axis.
 * @param yDomains the y domains
 * @param axisLength the axisLength of the y axis
 */
export declare function computeYScales(options: YScaleOptions): Map<GroupId, Scale>;
export {};
