import { DeepNonNullable } from 'utility-types';
import { Fit, FitConfig } from './specs';
import { DataSeries, DataSeriesDatum } from './series';
/**
 * Fit type that requires previous and/or next `non-nullable` values
 */
export declare type BoundingFit = Exclude<Fit, 'none' | 'explicit'>;
/**
 * `DataSeriesDatum` with non-`null` value for `x` and `y1`
 */
export declare type FullDataSeriesDatum = Omit<DataSeriesDatum, 'y1' | 'x'> & DeepNonNullable<Pick<DataSeriesDatum, 'y1' | 'x'>>;
/**
 * Embellishes `FullDataSeriesDatum` with `fittingIndex` for ordinal scales
 */
export declare type WithIndex<T> = T & {
    fittingIndex: number;
};
/**
 * Returns `[x, y1]` values for a given datum with `fittingIndex`
 */
export declare const getXYValues: ({ x, y1, fittingIndex }: WithIndex<FullDataSeriesDatum>) => [number, number];
export declare const getValue: (current: DataSeriesDatum<any>, currentIndex: number, previous: WithIndex<FullDataSeriesDatum> | null, next: WithIndex<FullDataSeriesDatum> | null, type: "linear" | "carry" | "lookahead" | "nearest" | "average" | "zero", endValue?: number | "nearest" | undefined) => DataSeriesDatum<any>;
export declare const parseConfig: (config?: "linear" | "none" | "carry" | "lookahead" | "nearest" | "average" | "zero" | FitConfig | undefined) => FitConfig;
export declare const fitFunction: (dataSeries: DataSeries, fitConfig: "linear" | "none" | "carry" | "lookahead" | "nearest" | "average" | "zero" | FitConfig, xScaleType: "linear" | "ordinal" | "log" | "sqrt" | "time", sorted?: boolean) => DataSeries;
