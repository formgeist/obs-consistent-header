import { ColorConfig } from '../../../utils/themes/theme';
import { Accessor } from '../../../utils/accessor';
import { GroupId, SpecId } from '../../../utils/ids';
import { YBasicSeriesSpec } from '../domains/y_domain';
import { BasicSeriesSpec, SeriesSpecs } from './specs';
import { ScaleType } from '../../../utils/scales/scales';
import { LastValues } from '../state/utils';
import { Datum } from '../../../utils/domain';
export interface FilledValues {
    /** the x value */
    x?: number | string;
    /** the max y value */
    y1?: number;
    /** the minimum y value */
    y0?: number;
}
export interface RawDataSeriesDatum<T = any> {
    /** the x value */
    x: number | string;
    /** the main y metric */
    y1: number | null;
    /** the optional y0 metric, used for bars or area with a lower bound */
    y0?: number | null;
    /** the datum */
    datum?: T;
}
export interface DataSeriesDatum<T = any> {
    /** the x value */
    x: number | string;
    /** the max y value */
    y1: number | null;
    /** the minimum y value */
    y0: number | null;
    /** initial y1 value, non stacked */
    initialY1: number | null;
    /** initial y0 value, non stacked */
    initialY0: number | null;
    /** initial datum */
    datum?: T;
    /** the list of filled values because missing or nulls */
    filled?: FilledValues;
}
export interface SeriesIdentifier {
    specId: SpecId;
    yAccessor: string | number;
    splitAccessors: Map<string | number, string | number>;
    seriesKeys: (string | number)[];
    key: string;
}
export declare type DataSeries = SeriesIdentifier & {
    data: DataSeriesDatum[];
};
export declare type RawDataSeries = SeriesIdentifier & {
    data: RawDataSeriesDatum[];
};
export interface FormattedDataSeries {
    groupId: GroupId;
    dataSeries: DataSeries[];
    counts: DataSeriesCounts;
}
export interface DataSeriesCounts {
    barSeries: number;
    lineSeries: number;
    areaSeries: number;
}
export declare type SeriesCollectionValue = {
    banded?: boolean;
    lastValue?: LastValues;
    specSortIndex?: number;
    seriesIdentifier: SeriesIdentifier;
};
export declare function getSeriesIndex(series: SeriesIdentifier[], target: SeriesIdentifier): number;
/**
 * Split a dataset into multiple series depending on the accessors.
 * Each series is then associated with a key thats belong to its configuration.
 *
 */
export declare function splitSeries({ id: specId, data, xAccessor, yAccessors, y0Accessors, splitSeriesAccessors, }: Pick<BasicSeriesSpec, 'id' | 'data' | 'xAccessor' | 'yAccessors' | 'y0Accessors' | 'splitSeriesAccessors'>): {
    rawDataSeries: RawDataSeries[];
    colorsValues: Set<string>;
    xValues: Set<string | number>;
};
/**
 * Gets global series key to id any series as a string
 */
export declare function getSeriesKey({ specId, yAccessor, splitAccessors, }: Pick<SeriesIdentifier, 'specId' | 'yAccessor' | 'splitAccessors'>): string;
/**
 * Reformat the datum having only the required x and y property.
 */
export declare function cleanDatum(datum: Datum, xAccessor: Accessor, yAccessor: Accessor, y0Accessor?: Accessor): RawDataSeriesDatum;
export declare function getFormattedDataseries(specs: YBasicSeriesSpec[], dataSeries: Map<SpecId, RawDataSeries[]>, xValues: Set<string | number>, xScaleType: ScaleType, seriesSpecs: SeriesSpecs): {
    stacked: FormattedDataSeries[];
    nonStacked: FormattedDataSeries[];
};
/**
 *
 * @param seriesSpecs the map for all the series spec
 * @param deselectedDataSeries the array of deselected/hidden data series
 */
export declare function getSplittedSeries(seriesSpecs: BasicSeriesSpec[], deselectedDataSeries?: SeriesIdentifier[]): {
    splittedSeries: Map<SpecId, RawDataSeries[]>;
    seriesCollection: Map<string, SeriesCollectionValue>;
    xValues: Set<string | number>;
};
/**
 * Get series label based on `SeriesIdentifier`
 */
export declare function getSeriesLabel(seriesIdentifier: SeriesIdentifier, hasSingleSeries: boolean, isTooltip: boolean, spec?: BasicSeriesSpec): string;
export declare function getSortedDataSeriesColorsValuesMap(seriesCollection: Map<string, SeriesCollectionValue>): Map<string, SeriesCollectionValue>;
export declare function getSeriesColors(seriesCollection: Map<string, SeriesCollectionValue>, chartColors: ColorConfig, customColors: Map<string, string>): Map<string, string>;
