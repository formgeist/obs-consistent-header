import { RectConfig } from 'konva/types/shapes/Rect';
import { PathConfig } from 'konva/types/shapes/Path';
import { CircleConfig } from 'konva/types/shapes/Circle';
import { AreaStyle, LineStyle, PointStyle, RectBorderStyle, RectStyle, GeometryStateStyle } from '../../../../../utils/themes/theme';
export interface PointStyleProps {
    radius: number;
    stroke: string;
    strokeWidth: number;
    strokeEnabled: boolean;
    fill: string;
    opacity: number;
}
/**
 * Return the style of a point.
 * The color value is used for stroke or fill if they are undefind in the PointStyle
 * @param color the series color
 * @param pointStyle the merged point style
 */
export declare function buildPointStyleProps(color: string, pointStyle: PointStyle, geometryStateStyle: GeometryStateStyle): PointStyleProps;
/**
 * Return the rendering props for a point
 * @param x the x position of the point
 * @param y the y position of the point
 * @param pointStyleProps the style props of the point
 */
export declare function buildPointRenderProps(x: number, y: number, pointStyleProps: PointStyleProps): CircleConfig;
/**
 * Return the rendering props for a line. The color of the line will be overwritten
 * by the stroke color of the lineStyle parameter if present
 * @param x the horizontal offset to place the line
 * @param linePath the SVG line path
 * @param color the computed color of the line for this series
 * @param lineStyle the line style
 * @param geometryStateStyle the highlight geometry style
 */
export declare function buildLineRenderProps(x: number, linePath: string, color: string, lineStyle: LineStyle, geometryStateStyle: GeometryStateStyle): PathConfig;
/**
 * Return the rendering props for an area. The color of the area will be overwritten
 * by the fill color of the areaStyle parameter if present
 * @param areaPath the SVG area path
 * @param x the horizontal offset to place the area
 * @param color the computed color of the line for this series
 * @param areaStyle the area style
 * @param geometryStateStyle the highlight geometry style
 */
export declare function buildAreaRenderProps(xTransform: number, areaPath: string, color: string, areaStyle: AreaStyle, geometryStateStyle: GeometryStateStyle): PathConfig;
/**
 * Return the rendering props for a bar. The color of the bar will be overwritten
 * by the fill color of the rectStyle parameter if present
 * @param x the x position of the rect
 * @param y the y position of the rect
 * @param width the width of the rect
 * @param height the height of the rect
 * @param color the computed color of the rect for this series
 * @param rectStyle the rect style
 * @param geometryStateStyle the highlight geometry style
 */
export declare function buildBarRenderProps(x: number, y: number, width: number, height: number, color: string, rectStyle: RectStyle, borderStyle: RectBorderStyle, geometryStateStyle: GeometryStateStyle): RectConfig;
/**
 * Return the rendering props for a bar. The color of the bar will be overwritten
 * by the fill color of the rectStyle parameter if present
 * @param x the x position of the rect
 * @param y the y position of the rect
 * @param width the width of the rect
 * @param height the height of the rect
 * @param color the computed color of the rect for this series
 * @param rectStyle the rect style
 * @param borderStyle the border rect style
 * @param geometryStyle the highlight geometry style
 */
export declare function buildBarBorderRenderProps(x: number, y: number, width: number, height: number, rectStyle: RectStyle, borderStyle: RectBorderStyle, geometryStateStyle: GeometryStateStyle): RectConfig | null;
