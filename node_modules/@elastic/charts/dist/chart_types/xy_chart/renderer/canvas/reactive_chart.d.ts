import React, { RefObject } from 'react';
import { Stage } from 'react-konva';
import { AnnotationDimensions } from '../../annotations/annotation_utils';
import { Transform, Geometries } from '../../state/utils';
import { Rotation, AnnotationSpec } from '../../utils/specs';
import { onChartRendered } from '../../../../state/actions/chart';
import { Dimensions } from '../../../../utils/dimensions';
import { AnnotationId } from '../../../../utils/ids';
import { Theme } from '../../../../utils/themes/theme';
import { LegendItem } from '../../../../chart_types/xy_chart/legend/legend';
interface ReactiveChartStateProps {
    initialized: boolean;
    geometries: Geometries;
    debug: boolean;
    chartContainerDimensions: Dimensions;
    chartRotation: Rotation;
    chartDimensions: Dimensions;
    chartTransform: Transform;
    theme: Theme;
    isChartAnimatable: boolean;
    isChartEmpty: boolean;
    annotationDimensions: Map<AnnotationId, AnnotationDimensions>;
    annotationSpecs: AnnotationSpec[];
    isBrushAvailable: boolean;
    highlightedLegendItem?: LegendItem;
}
interface ReactiveChartDispatchProps {
    onChartRendered: typeof onChartRendered;
}
interface ReactiveChartOwnProps {
    forwardStageRef: RefObject<Stage>;
}
interface ReactiveChartElementIndex {
    element: JSX.Element;
    zIndex: number;
}
declare type ReactiveChartProps = ReactiveChartOwnProps & ReactiveChartStateProps & ReactiveChartDispatchProps;
declare class Chart extends React.Component<ReactiveChartProps> {
    static displayName: string;
    firstRender: boolean;
    componentDidUpdate(): void;
    renderBarSeries: (clippings: import("utility-types").Required<import("konva/types/Container").ContainerConfig, "clipHeight" | "clipWidth">) => ReactiveChartElementIndex[];
    renderLineSeries: (clippings: import("utility-types").Required<import("konva/types/Container").ContainerConfig, "clipHeight" | "clipWidth">) => ReactiveChartElementIndex[];
    renderAreaSeries: (clippings: import("utility-types").Required<import("konva/types/Container").ContainerConfig, "clipHeight" | "clipWidth">) => ReactiveChartElementIndex[];
    renderAnnotations: () => ReactiveChartElementIndex[];
    sortAndRenderElements(): JSX.Element[];
    render(): JSX.Element | null;
    private renderDebugChartBorders;
}
export declare const ReactiveChart: import("react-redux").ConnectedComponent<typeof Chart, Pick<ReactiveChartProps, "forwardStageRef">>;
export {};
