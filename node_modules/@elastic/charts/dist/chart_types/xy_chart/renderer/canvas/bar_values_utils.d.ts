import { Required } from 'utility-types';
import { Rotation } from '../../utils/specs';
import { Dimensions } from '../../../../utils/dimensions';
import { DisplayValueStyle } from '../../../../utils/themes/theme';
import { ContainerConfig } from 'konva/types/Container';
import { ClippedRanges } from '../../../../utils/geometry';
export interface PointStyleProps {
    radius: number;
    stroke: string;
    strokeWidth: number;
    strokeEnabled: boolean;
    fill: string;
    opacity: number;
}
export declare type Clippings = Required<ContainerConfig, 'clipHeight' | 'clipWidth'>;
export declare function rotateBarValueProps(chartRotation: Rotation, chartDimensions: Dimensions, barDimensions: Dimensions, displayValueDimensions: Dimensions, displayValue: {
    text: string;
    width: number;
    height: number;
    isValueContainedInElement?: boolean;
}, props: DisplayValueStyle & {
    x: number;
    y: number;
    align: string;
    verticalAlign: string;
    text: string;
    width: number;
    height: number;
}): import("../../../../utils/themes/theme").TextStyle & {
    offsetX: number;
    offsetY: number;
} & {
    x: number;
    y: number;
    align: string;
    verticalAlign: string;
    text: string;
    width: number;
    height: number;
};
export declare function buildBarValueProps({ x, y, barHeight, barWidth, displayValueStyle, displayValue, chartRotation, chartDimensions, }: {
    x: number;
    y: number;
    barHeight: number;
    barWidth: number;
    displayValueStyle: DisplayValueStyle;
    displayValue: {
        text: string;
        width: number;
        height: number;
        hideClippedValue?: boolean;
        isValueContainedInElement?: boolean;
    };
    chartRotation: Rotation;
    chartDimensions: Dimensions;
}): DisplayValueStyle & {
    x: number;
    y: number;
    align: string;
    text: string;
    width: number;
    height: number;
};
export declare function getBarValueClipDimensions(displayValue: {
    width: number;
    height: number;
    isValueContainedInElement?: boolean;
}, computedDimensions: {
    width: number;
    height: number;
}, barHeight: number, chartRotation: Rotation): {
    width: number;
    height: number;
    offsetX: number;
    offsetY: number;
};
export declare function isBarValueOverflow(chartDimensions: Dimensions, clip: {
    width: number;
    height: number;
    offsetX: number;
    offsetY: number;
}, valuePosition: {
    x: number;
    y: number;
    offsetX: number;
    offsetY: number;
}, hideClippedValue?: boolean): boolean;
/**
 * Creates `clipFunc` for Konva paths that have clipped ranges
 *
 * @param clippedRanges ranges to be clipped from rendering
 * @param clippings konva global clippings
 * @param negate show, rather than exclude, only selected ranges
 */
export declare function clipRanges(clippedRanges: ClippedRanges, clippings: Clippings, negate?: boolean): (ctx: CanvasRenderingContext2D) => void;
