import { BasicSeriesSpec, DomainRange } from '../utils/specs';
import { GroupId, SpecId } from '../../../utils/ids';
import { ScaleContinuousType } from '../../../utils/scales/scales';
import { BaseDomain } from './domain';
import { RawDataSeries } from '../utils/series';
export declare type YDomain = BaseDomain & {
    type: 'yDomain';
    isBandScale: false;
    scaleType: ScaleContinuousType;
    groupId: GroupId;
};
export declare type YBasicSeriesSpec = Pick<BasicSeriesSpec, 'id' | 'seriesType' | 'yScaleType' | 'groupId' | 'stackAccessors' | 'yScaleToDataExtent' | 'useDefaultGroupDomain'> & {
    stackAsPercentage?: boolean;
    enableHistogramMode?: boolean;
};
export declare function mergeYDomain(dataSeries: Map<SpecId, RawDataSeries[]>, specs: YBasicSeriesSpec[], domainsByGroupId: Map<GroupId, DomainRange>): YDomain[];
export declare function getDataSeriesOnGroup(dataSeries: Map<SpecId, RawDataSeries[]>, specs: YBasicSeriesSpec[]): RawDataSeries[];
export declare function splitSpecsByGroupId(specs: YBasicSeriesSpec[]): Map<string, {
    isPercentageStack: boolean;
    stacked: YBasicSeriesSpec[];
    nonStacked: YBasicSeriesSpec[];
}>;
/**
 * Coerce the scale types of a set of specification to a generic one.
 * If there is at least one bar series type, than the response will specity
 * that the coerced scale is a `scaleBand` (each point needs to have a surrounding empty
 * space to draw the bar width).
 * If there are multiple continuous scale types, is coerced to linear.
 * If there are at least one Ordinal scale type, is coerced to ordinal.
 * If none of the above, than coerce to the specified scale.
 * @returns {ChartScaleType}
 */
export declare function coerceYScaleTypes(specs: Pick<BasicSeriesSpec, 'yScaleType'>[]): ScaleContinuousType;
