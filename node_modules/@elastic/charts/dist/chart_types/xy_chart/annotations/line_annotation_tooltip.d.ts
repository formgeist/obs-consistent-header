/// <reference types="react" />
import { AnnotationDomainType, Position, Rotation, LineAnnotationSpec, LineAnnotationDatum, AxisSpec } from '../utils/specs';
import { AnnotationTooltipState, AnnotationDetails, AnnotationMarker } from './annotation_utils';
import { Dimensions } from '../../../utils/dimensions';
import { Scale } from '../../../utils/scales/scales';
import { GroupId } from '../../../utils/ids';
import { Point } from '../../../utils/point';
export declare type AnnotationLinePosition = [number, number, number, number];
/** Start and end points of a line annotation  */
export interface AnnotationLinePathPoints {
    /** x1,y1 the start point anchored to the linked axis */
    start: {
        x1: number;
        y1: number;
    };
    /** x2,y2 the end point */
    end: {
        x2: number;
        y2: number;
    };
}
export interface AnnotationLineProps {
    /** the position of the start point relative to the Chart */
    anchor: {
        position: Position;
        top: number;
        left: number;
    };
    /**
     * The path points of a line annotation
     */
    linePathPoints: AnnotationLinePathPoints;
    details: AnnotationDetails;
    marker?: AnnotationMarker;
}
export declare const DEFAULT_LINE_OVERFLOW = 0;
export declare function computeYDomainLineAnnotationDimensions(dataValues: LineAnnotationDatum[], yScale: Scale, chartRotation: Rotation, axisPosition: Position, chartDimensions: Dimensions, lineColor: string, marker?: JSX.Element, markerDimension?: {
    width: number;
    height: number;
}): AnnotationLineProps[];
export declare function computeXDomainLineAnnotationDimensions(dataValues: LineAnnotationDatum[], xScale: Scale, chartRotation: Rotation, axisPosition: Position, chartDimensions: Dimensions, lineColor: string, xScaleOffset: number, enableHistogramMode: boolean, marker?: JSX.Element, markerDimension?: {
    width: number;
    height: number;
}): AnnotationLineProps[];
export declare function computeLineAnnotationDimensions(annotationSpec: LineAnnotationSpec, chartDimensions: Dimensions, chartRotation: Rotation, yScales: Map<GroupId, Scale>, xScale: Scale, axisPosition: Position, xScaleOffset: number, enableHistogramMode: boolean): AnnotationLineProps[] | null;
export declare function getAnnotationLineTooltipXOffset(chartRotation: Rotation, axisPosition: Position): number;
export declare function getAnnotationLineTooltipYOffset(chartRotation: Rotation, axisPosition: Position): number;
export declare function isVerticalAnnotationLine(isXDomainAnnotation: boolean, isHorizontalChartRotation: boolean): boolean;
/**
 * Checks if the cursorPosition is within the line annotation marker
 * @param cursorPosition the cursor position relative to the projected area
 * @param marker the line annotation marker
 */
export declare function isWithinLineMarkerBounds(cursorPosition: Point, marker: AnnotationMarker): boolean;
export declare function computeLineAnnotationTooltipState(cursorPosition: Point, annotationLines: AnnotationLineProps[], groupId: GroupId, domainType: AnnotationDomainType, axesSpecs: AxisSpec[]): AnnotationTooltipState;
