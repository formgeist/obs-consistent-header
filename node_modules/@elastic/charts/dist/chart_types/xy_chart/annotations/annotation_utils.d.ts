/// <reference types="react" />
import { AnnotationDomainType, AnnotationSpec, AnnotationType, AxisSpec, Position, Rotation } from '../utils/specs';
import { Dimensions } from '../../../utils/dimensions';
import { AnnotationId, GroupId } from '../../../utils/ids';
import { Scale } from '../../../utils/scales/scales';
import { Point } from '../../../utils/point';
import { AnnotationLineProps } from './line_annotation_tooltip';
import { AnnotationRectProps } from './rect_annotation_tooltip';
export declare type AnnotationTooltipFormatter = (details?: string) => JSX.Element | null;
export declare type AnnotationTooltipState = AnnotationTooltipVisibleState | AnnotationTooltipHiddenState;
export interface AnnotationTooltipVisibleState {
    isVisible: true;
    annotationType: AnnotationType;
    header?: string;
    details?: string;
    anchor: {
        position?: Position;
        top: number;
        left: number;
    };
    renderTooltip?: AnnotationTooltipFormatter;
}
export interface AnnotationTooltipHiddenState {
    isVisible: false;
}
/**
 * The header and description strings for an Annotation
 */
export interface AnnotationDetails {
    headerText?: string;
    detailsText?: string;
}
/**
 * The marker for an Annotation. Usually a JSX element
 */
export interface AnnotationMarker {
    icon: JSX.Element;
    position: {
        top: number;
        left: number;
    };
    dimension: {
        width: number;
        height: number;
    };
    color: string;
}
export declare type AnnotationDimensions = AnnotationLineProps[] | AnnotationRectProps[];
export declare type Bounds = {
    startX: number;
    endX: number;
    startY: number;
    endY: number;
};
export declare function scaleAndValidateDatum(dataValue: any, scale: Scale, alignWithTick: boolean): number | null;
export declare function getAnnotationAxis(axesSpecs: AxisSpec[], groupId: GroupId, domainType: AnnotationDomainType, chartRotation: Rotation): Position | null;
export declare function computeClusterOffset(totalBarsInCluster: number, barsShift: number, bandwidth: number): number;
export declare function isXDomain(domainType: AnnotationDomainType): boolean;
export declare function getRotatedCursor(
/** the cursor position relative to the projection area */
cursorPosition: Point, chartDimensions: Dimensions, chartRotation: Rotation): Point;
export declare function computeAnnotationDimensions(annotations: AnnotationSpec[], chartDimensions: Dimensions, chartRotation: Rotation, yScales: Map<GroupId, Scale>, xScale: Scale, axesSpecs: AxisSpec[], totalBarsInCluster: number, enableHistogramMode: boolean): Map<AnnotationId, AnnotationDimensions>;
export declare function computeAnnotationTooltipState(cursorPosition: Point, annotationDimensions: Map<AnnotationId, any>, annotationSpecs: AnnotationSpec[], chartRotation: Rotation, axesSpecs: AxisSpec[], chartDimensions: Dimensions): AnnotationTooltipState | null;
