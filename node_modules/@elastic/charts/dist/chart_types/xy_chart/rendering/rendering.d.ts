import { AreaSeriesStyle, LineSeriesStyle, PointStyle, SharedGeometryStateStyle, BarSeriesStyle, GeometryStateStyle } from '../../../utils/themes/theme';
import { Scale } from '../../../utils/scales/scales';
import { CurveType } from '../../../utils/curves';
import { DataSeriesDatum, SeriesIdentifier, DataSeries } from '../utils/series';
import { DisplayValueSpec, PointStyleAccessor, BarStyleAccessor } from '../utils/specs';
import { IndexedGeometry, PointGeometry, BarGeometry, AreaGeometry, LineGeometry, ClippedRanges } from '../../../utils/geometry';
import { LegendItem } from '../legend/legend';
export declare function mutableIndexedGeometryMapUpsert(mutableGeometriesIndex: Map<any, IndexedGeometry[]>, key: any, geometry: IndexedGeometry | IndexedGeometry[]): void;
export declare function getPointStyleOverrides(datum: DataSeriesDatum, seriesIdentifier: SeriesIdentifier, pointStyleAccessor?: PointStyleAccessor): Partial<PointStyle> | undefined;
export declare function getBarStyleOverrides(datum: DataSeriesDatum, seriesIdentifier: SeriesIdentifier, seriesStyle: BarSeriesStyle, styleAccessor?: BarStyleAccessor): BarSeriesStyle;
export declare function renderBars(orderIndex: number, dataSeries: DataSeries, xScale: Scale, yScale: Scale, color: string, sharedSeriesStyle: BarSeriesStyle, displayValueSettings?: DisplayValueSpec, styleAccessor?: BarStyleAccessor, minBarHeight?: number): {
    barGeometries: BarGeometry[];
    indexedGeometries: Map<any, IndexedGeometry[]>;
};
export declare function renderLine(shift: number, dataSeries: DataSeries, xScale: Scale, yScale: Scale, color: string, curve: CurveType, hasY0Accessors: boolean, xScaleOffset: number, seriesStyle: LineSeriesStyle, pointStyleAccessor?: PointStyleAccessor, hasFit?: boolean): {
    lineGeometry: LineGeometry;
    indexedGeometries: Map<any, IndexedGeometry[]>;
};
/**
 * Returns value of `y1` or `filled.y1` or null
 */
export declare const getYValue: ({ y1, filled }: DataSeriesDatum<any>) => number | null;
export declare function renderArea(shift: number, dataSeries: DataSeries, xScale: Scale, yScale: Scale, color: string, curve: CurveType, hasY0Accessors: boolean, xScaleOffset: number, seriesStyle: AreaSeriesStyle, isStacked?: boolean, pointStyleAccessor?: PointStyleAccessor, hasFit?: boolean): {
    areaGeometry: AreaGeometry;
    indexedGeometries: Map<any, IndexedGeometry[]>;
};
/**
 * Gets clipped ranges that have been fitted to values
 * @param dataset
 * @param xScale
 * @param xScaleOffset
 */
export declare function getClippedRanges(dataset: DataSeriesDatum[], xScale: Scale, xScaleOffset: number): ClippedRanges;
export declare function getGeometryStateStyle(seriesIdentifier: SeriesIdentifier, highlightedLegendItem: LegendItem | null, sharedGeometryStyle: SharedGeometryStateStyle, individualHighlight?: {
    [key: string]: boolean;
}): GeometryStateStyle;
export declare function isPointOnGeometry(xCoordinate: number, yCoordinate: number, indexedGeometry: BarGeometry | PointGeometry): boolean;
export declare function getSeriesIdentifierPrefixedKey(seriesIdentifier: SeriesIdentifier, prefix?: string, postfix?: string): string;
