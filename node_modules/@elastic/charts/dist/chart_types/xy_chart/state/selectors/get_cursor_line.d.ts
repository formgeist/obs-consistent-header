import { Dimensions } from '../../../../utils/dimensions';
export declare const getCursorLinePositionSelector: import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, Dimensions | undefined> & {
    resultFunc: (res1: {
        chartDimensions: Dimensions;
        leftMargin: number;
    }, res2: import("../../../..").SettingsSpec, res3: import("../../../../utils/point").Point) => Dimensions | undefined;
    dependencies: [import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, {
        chartDimensions: Dimensions;
        leftMargin: number;
    }>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, import("../../../..").SettingsSpec>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, import("../../../../utils/point").Point>];
    recomputations: () => number;
    resetRecomputations: () => number;
} & {
    getMatchingSelector: (state: import("../../../../state/chart_state").GlobalChartState, ...args: any[]) => import("re-reselect").OutputSelector<import("../../../../state/chart_state").GlobalChartState, Dimensions | undefined, (res1: {
        chartDimensions: Dimensions;
        leftMargin: number;
    }, res2: import("../../../..").SettingsSpec, res3: import("../../../../utils/point").Point) => Dimensions | undefined, [import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, {
        chartDimensions: Dimensions;
        leftMargin: number;
    }>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, import("../../../..").SettingsSpec>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, import("../../../../utils/point").Point>]>;
    removeMatchingSelector: (state: import("../../../../state/chart_state").GlobalChartState, ...args: any[]) => void;
    clearCache: () => void;
    cache: import("re-reselect").ICacheObject;
    keySelector: import("re-reselect").KeySelector<import("../../../../state/chart_state").GlobalChartState>;
};
