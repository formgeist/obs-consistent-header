import { GlobalChartState } from '../../../../state/chart_state';
import { LegendItem } from '../../../../chart_types/xy_chart/legend/legend';
export declare const getHighlightedSeriesSelector: import("re-reselect").Selector<GlobalChartState, LegendItem | undefined> & {
    resultFunc: (res1: string | null, res2: Map<string, LegendItem>) => LegendItem | undefined;
    dependencies: [import("re-reselect").Selector<GlobalChartState, string | null>, import("re-reselect").Selector<GlobalChartState, Map<string, LegendItem>>];
    recomputations: () => number;
    resetRecomputations: () => number;
} & {
    getMatchingSelector: (state: GlobalChartState, ...args: any[]) => import("re-reselect").OutputSelector<GlobalChartState, LegendItem | undefined, (res1: string | null, res2: Map<string, LegendItem>) => LegendItem | undefined, [import("re-reselect").Selector<GlobalChartState, string | null>, import("re-reselect").Selector<GlobalChartState, Map<string, LegendItem>>]>;
    removeMatchingSelector: (state: GlobalChartState, ...args: any[]) => void;
    clearCache: () => void;
    cache: import("re-reselect").ICacheObject;
    keySelector: import("re-reselect").KeySelector<GlobalChartState>;
};
