import { GlobalChartState } from '../../../../state/chart_state';
import { AxisSpec, BasicSeriesSpec, AnnotationSpec } from '../../utils/specs';
export declare const getAxisSpecsSelector: import("re-reselect").Selector<GlobalChartState, AxisSpec[]> & {
    resultFunc: (res: import("../../../../state/chart_state").SpecList) => AxisSpec[];
    dependencies: [import("re-reselect").Selector<GlobalChartState, import("../../../../state/chart_state").SpecList>];
    recomputations: () => number;
    resetRecomputations: () => number;
} & {
    getMatchingSelector: (state: GlobalChartState, ...args: any[]) => import("re-reselect").OutputSelector<GlobalChartState, AxisSpec[], (res: import("../../../../state/chart_state").SpecList) => AxisSpec[], [import("re-reselect").Selector<GlobalChartState, import("../../../../state/chart_state").SpecList>]>;
    removeMatchingSelector: (state: GlobalChartState, ...args: any[]) => void;
    clearCache: () => void;
    cache: import("re-reselect").ICacheObject;
    keySelector: import("re-reselect").KeySelector<GlobalChartState>;
};
export declare const getSeriesSpecsSelector: import("re-reselect").Selector<GlobalChartState, BasicSeriesSpec[]> & {
    resultFunc: (res: import("../../../../state/chart_state").SpecList) => BasicSeriesSpec[];
    dependencies: [import("re-reselect").Selector<GlobalChartState, import("../../../../state/chart_state").SpecList>];
    recomputations: () => number;
    resetRecomputations: () => number;
} & {
    getMatchingSelector: (state: GlobalChartState, ...args: any[]) => import("re-reselect").OutputSelector<GlobalChartState, BasicSeriesSpec[], (res: import("../../../../state/chart_state").SpecList) => BasicSeriesSpec[], [import("re-reselect").Selector<GlobalChartState, import("../../../../state/chart_state").SpecList>]>;
    removeMatchingSelector: (state: GlobalChartState, ...args: any[]) => void;
    clearCache: () => void;
    cache: import("re-reselect").ICacheObject;
    keySelector: import("re-reselect").KeySelector<GlobalChartState>;
};
export declare const getAnnotationSpecsSelector: import("re-reselect").Selector<GlobalChartState, AnnotationSpec[]> & {
    resultFunc: (res: import("../../../../state/chart_state").SpecList) => AnnotationSpec[];
    dependencies: [import("re-reselect").Selector<GlobalChartState, import("../../../../state/chart_state").SpecList>];
    recomputations: () => number;
    resetRecomputations: () => number;
} & {
    getMatchingSelector: (state: GlobalChartState, ...args: any[]) => import("re-reselect").OutputSelector<GlobalChartState, AnnotationSpec[], (res: import("../../../../state/chart_state").SpecList) => AnnotationSpec[], [import("re-reselect").Selector<GlobalChartState, import("../../../../state/chart_state").SpecList>]>;
    removeMatchingSelector: (state: GlobalChartState, ...args: any[]) => void;
    clearCache: () => void;
    cache: import("re-reselect").ICacheObject;
    keySelector: import("re-reselect").KeySelector<GlobalChartState>;
};
