import { TooltipPosition } from '../../crosshair/crosshair_utils';
export declare const getTooltipPositionSelector: import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, TooltipPosition | null> & {
    resultFunc: (res1: {
        chartDimensions: import("../../../../utils/dimensions").Dimensions;
        leftMargin: number;
    }, res2: import("../../../..").SettingsSpec, res3: (import("../../../../utils/dimensions").Dimensions & {
        visible: boolean;
    }) | undefined, res4: import("../../../../utils/point").Point, res5: import("../utils").ComputedScales) => TooltipPosition | null;
    dependencies: [import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, {
        chartDimensions: import("../../../../utils/dimensions").Dimensions;
        leftMargin: number;
    }>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, import("../../../..").SettingsSpec>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, (import("../../../../utils/dimensions").Dimensions & {
        visible: boolean;
    }) | undefined>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, import("../../../../utils/point").Point>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, import("../utils").ComputedScales>];
    recomputations: () => number;
    resetRecomputations: () => number;
} & {
    getMatchingSelector: (state: import("../../../../state/chart_state").GlobalChartState, ...args: any[]) => import("re-reselect").OutputSelector<import("../../../../state/chart_state").GlobalChartState, TooltipPosition | null, (res1: {
        chartDimensions: import("../../../../utils/dimensions").Dimensions;
        leftMargin: number;
    }, res2: import("../../../..").SettingsSpec, res3: (import("../../../../utils/dimensions").Dimensions & {
        visible: boolean;
    }) | undefined, res4: import("../../../../utils/point").Point, res5: import("../utils").ComputedScales) => TooltipPosition | null, [import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, {
        chartDimensions: import("../../../../utils/dimensions").Dimensions;
        leftMargin: number;
    }>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, import("../../../..").SettingsSpec>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, (import("../../../../utils/dimensions").Dimensions & {
        visible: boolean;
    }) | undefined>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, import("../../../../utils/point").Point>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, import("../utils").ComputedScales>]>;
    removeMatchingSelector: (state: import("../../../../state/chart_state").GlobalChartState, ...args: any[]) => void;
    clearCache: () => void;
    cache: import("re-reselect").ICacheObject;
    keySelector: import("re-reselect").KeySelector<import("../../../../state/chart_state").GlobalChartState>;
};
