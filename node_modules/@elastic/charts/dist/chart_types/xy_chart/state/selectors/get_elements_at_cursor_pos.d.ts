import { Point } from '../../../../utils/point';
import { ComputedScales } from '../utils';
import { IndexedGeometry } from '../../../../utils/geometry';
import { Dimensions } from '../../../../utils/dimensions';
import { GlobalChartState } from '../../../../state/chart_state';
export declare const getElementAtCursorPositionSelector: import("re-reselect").Selector<GlobalChartState, IndexedGeometry[]> & {
    resultFunc: (res1: Point, res2: ComputedScales, res3: any[], res4: Map<any, IndexedGeometry[]>, res5: import("../../../../specs").PointerOverEvent | import("../../../../specs").PointerOutEvent | null, res6: {
        chartDimensions: Dimensions;
        leftMargin: number;
    }) => IndexedGeometry[];
    dependencies: [import("re-reselect").Selector<GlobalChartState, Point>, import("re-reselect").Selector<GlobalChartState, ComputedScales>, import("re-reselect").Selector<GlobalChartState, any[]>, import("re-reselect").Selector<GlobalChartState, Map<any, IndexedGeometry[]>>, import("re-reselect").Selector<GlobalChartState, import("../../../../specs").PointerOverEvent | import("../../../../specs").PointerOutEvent | null>, import("re-reselect").Selector<GlobalChartState, {
        chartDimensions: Dimensions;
        leftMargin: number;
    }>];
    recomputations: () => number;
    resetRecomputations: () => number;
} & {
    getMatchingSelector: (state: GlobalChartState, ...args: any[]) => import("re-reselect").OutputSelector<GlobalChartState, IndexedGeometry[], (res1: Point, res2: ComputedScales, res3: any[], res4: Map<any, IndexedGeometry[]>, res5: import("../../../../specs").PointerOverEvent | import("../../../../specs").PointerOutEvent | null, res6: {
        chartDimensions: Dimensions;
        leftMargin: number;
    }) => IndexedGeometry[], [import("re-reselect").Selector<GlobalChartState, Point>, import("re-reselect").Selector<GlobalChartState, ComputedScales>, import("re-reselect").Selector<GlobalChartState, any[]>, import("re-reselect").Selector<GlobalChartState, Map<any, IndexedGeometry[]>>, import("re-reselect").Selector<GlobalChartState, import("../../../../specs").PointerOverEvent | import("../../../../specs").PointerOutEvent | null>, import("re-reselect").Selector<GlobalChartState, {
        chartDimensions: Dimensions;
        leftMargin: number;
    }>]>;
    removeMatchingSelector: (state: GlobalChartState, ...args: any[]) => void;
    clearCache: () => void;
    cache: import("re-reselect").ICacheObject;
    keySelector: import("re-reselect").KeySelector<GlobalChartState>;
};
