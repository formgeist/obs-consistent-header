import { Dimensions } from '../../../../utils/dimensions';
import { Point } from '../../../../utils/point';
import { TooltipValue } from '../../utils/interactions';
import { AxisSpec, AnnotationSpec, Rotation } from '../../utils/specs';
import { AnnotationDimensions } from '../../annotations/annotation_utils';
import { ComputedGeometries } from '../utils';
import { GlobalChartState } from '../../../../state/chart_state';
export declare const getAnnotationTooltipStateSelector: import("re-reselect").Selector<GlobalChartState, import("../../annotations/annotation_utils").AnnotationTooltipVisibleState | import("../../annotations/annotation_utils").AnnotationTooltipHiddenState | null> & {
    resultFunc: (res1: Point, res2: {
        chartDimensions: Dimensions;
        leftMargin: number;
    }, res3: ComputedGeometries, res4: Rotation, res5: AnnotationSpec[], res6: AxisSpec[], res7: Map<string, AnnotationDimensions>, res8: TooltipValue[]) => import("../../annotations/annotation_utils").AnnotationTooltipVisibleState | import("../../annotations/annotation_utils").AnnotationTooltipHiddenState | null;
    dependencies: [import("re-reselect").Selector<GlobalChartState, Point>, import("re-reselect").Selector<GlobalChartState, {
        chartDimensions: Dimensions;
        leftMargin: number;
    }>, import("re-reselect").Selector<GlobalChartState, ComputedGeometries>, import("re-reselect").Selector<GlobalChartState, Rotation>, import("re-reselect").Selector<GlobalChartState, AnnotationSpec[]>, import("re-reselect").Selector<GlobalChartState, AxisSpec[]>, import("re-reselect").Selector<GlobalChartState, Map<string, AnnotationDimensions>>, import("re-reselect").Selector<GlobalChartState, TooltipValue[]>];
    recomputations: () => number;
    resetRecomputations: () => number;
} & {
    getMatchingSelector: (state: GlobalChartState, ...args: any[]) => import("re-reselect").OutputSelector<GlobalChartState, import("../../annotations/annotation_utils").AnnotationTooltipVisibleState | import("../../annotations/annotation_utils").AnnotationTooltipHiddenState | null, (res1: Point, res2: {
        chartDimensions: Dimensions;
        leftMargin: number;
    }, res3: ComputedGeometries, res4: Rotation, res5: AnnotationSpec[], res6: AxisSpec[], res7: Map<string, AnnotationDimensions>, res8: TooltipValue[]) => import("../../annotations/annotation_utils").AnnotationTooltipVisibleState | import("../../annotations/annotation_utils").AnnotationTooltipHiddenState | null, [import("re-reselect").Selector<GlobalChartState, Point>, import("re-reselect").Selector<GlobalChartState, {
        chartDimensions: Dimensions;
        leftMargin: number;
    }>, import("re-reselect").Selector<GlobalChartState, ComputedGeometries>, import("re-reselect").Selector<GlobalChartState, Rotation>, import("re-reselect").Selector<GlobalChartState, AnnotationSpec[]>, import("re-reselect").Selector<GlobalChartState, AxisSpec[]>, import("re-reselect").Selector<GlobalChartState, Map<string, AnnotationDimensions>>, import("re-reselect").Selector<GlobalChartState, TooltipValue[]>]>;
    removeMatchingSelector: (state: GlobalChartState, ...args: any[]) => void;
    clearCache: () => void;
    cache: import("re-reselect").ICacheObject;
    keySelector: import("re-reselect").KeySelector<GlobalChartState>;
};
