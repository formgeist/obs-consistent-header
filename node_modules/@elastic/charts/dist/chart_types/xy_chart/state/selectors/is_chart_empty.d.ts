export declare const isChartEmptySelector: import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, boolean> & {
    resultFunc: (res: Map<string, import("../../legend/legend").LegendItem>) => boolean;
    dependencies: [import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, Map<string, import("../../legend/legend").LegendItem>>];
    recomputations: () => number;
    resetRecomputations: () => number;
} & {
    getMatchingSelector: (state: import("../../../../state/chart_state").GlobalChartState, ...args: any[]) => import("re-reselect").OutputSelector<import("../../../../state/chart_state").GlobalChartState, boolean, (res: Map<string, import("../../legend/legend").LegendItem>) => boolean, [import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, Map<string, import("../../legend/legend").LegendItem>>]>;
    removeMatchingSelector: (state: import("../../../../state/chart_state").GlobalChartState, ...args: any[]) => void;
    clearCache: () => void;
    cache: import("re-reselect").ICacheObject;
    keySelector: import("re-reselect").KeySelector<import("../../../../state/chart_state").GlobalChartState>;
};
