import { GlobalChartState } from '../../../../state/chart_state';
export declare const getPointerCursorSelector: import("re-reselect").Selector<GlobalChartState, string> & {
    resultFunc: (res1: import("../../../../utils/geometry").IndexedGeometry[], res2: import("../../../..").SettingsSpec, res3: import("../../../../utils/point").Point, res4: {
        chartDimensions: import("../../../../utils/dimensions").Dimensions;
        leftMargin: number;
    }, res5: boolean) => string;
    dependencies: [import("re-reselect").Selector<GlobalChartState, import("../../../../utils/geometry").IndexedGeometry[]>, import("re-reselect").Selector<GlobalChartState, import("../../../..").SettingsSpec>, import("re-reselect").Selector<GlobalChartState, import("../../../../utils/point").Point>, import("re-reselect").Selector<GlobalChartState, {
        chartDimensions: import("../../../../utils/dimensions").Dimensions;
        leftMargin: number;
    }>, import("re-reselect").Selector<GlobalChartState, boolean>];
    recomputations: () => number;
    resetRecomputations: () => number;
} & {
    getMatchingSelector: (state: GlobalChartState, ...args: any[]) => import("re-reselect").OutputSelector<GlobalChartState, string, (res1: import("../../../../utils/geometry").IndexedGeometry[], res2: import("../../../..").SettingsSpec, res3: import("../../../../utils/point").Point, res4: {
        chartDimensions: import("../../../../utils/dimensions").Dimensions;
        leftMargin: number;
    }, res5: boolean) => string, [import("re-reselect").Selector<GlobalChartState, import("../../../../utils/geometry").IndexedGeometry[]>, import("re-reselect").Selector<GlobalChartState, import("../../../..").SettingsSpec>, import("re-reselect").Selector<GlobalChartState, import("../../../../utils/point").Point>, import("re-reselect").Selector<GlobalChartState, {
        chartDimensions: import("../../../../utils/dimensions").Dimensions;
        leftMargin: number;
    }>, import("re-reselect").Selector<GlobalChartState, boolean>]>;
    removeMatchingSelector: (state: GlobalChartState, ...args: any[]) => void;
    clearCache: () => void;
    cache: import("re-reselect").ICacheObject;
    keySelector: import("re-reselect").KeySelector<GlobalChartState>;
};
