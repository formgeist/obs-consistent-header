import { AxisTick, AxisLinePosition } from '../../utils/axis_utils';
import { AxisId } from '../../../../utils/ids';
import { Dimensions } from '../../../../utils/dimensions';
interface AxisVisibleTicks {
    axisPositions: Map<AxisId, Dimensions>;
    axisTicks: Map<AxisId, AxisTick[]>;
    axisVisibleTicks: Map<AxisId, AxisTick[]>;
    axisGridLinesPositions: Map<AxisId, AxisLinePosition[]>;
}
export declare const computeAxisVisibleTicksSelector: import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, AxisVisibleTicks> & {
    resultFunc: (res1: {
        chartDimensions: Dimensions;
        leftMargin: number;
    }, res2: import("../../../..").Theme, res3: import("../../../..").SettingsSpec, res4: import("../../utils/specs").AxisSpec[], res5: Map<string, import("../../utils/axis_utils").AxisTicksDimensions>, res6: import("../utils").SeriesDomainsAndData, res7: number, res8: boolean, res9: number) => AxisVisibleTicks;
    dependencies: [import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, {
        chartDimensions: Dimensions;
        leftMargin: number;
    }>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, import("../../../..").Theme>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, import("../../../..").SettingsSpec>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, import("../../utils/specs").AxisSpec[]>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, Map<string, import("../../utils/axis_utils").AxisTicksDimensions>>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, import("../utils").SeriesDomainsAndData>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, number>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, boolean>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, number>];
    recomputations: () => number;
    resetRecomputations: () => number;
} & {
    getMatchingSelector: (state: import("../../../../state/chart_state").GlobalChartState, ...args: any[]) => import("re-reselect").OutputSelector<import("../../../../state/chart_state").GlobalChartState, AxisVisibleTicks, (res1: {
        chartDimensions: Dimensions;
        leftMargin: number;
    }, res2: import("../../../..").Theme, res3: import("../../../..").SettingsSpec, res4: import("../../utils/specs").AxisSpec[], res5: Map<string, import("../../utils/axis_utils").AxisTicksDimensions>, res6: import("../utils").SeriesDomainsAndData, res7: number, res8: boolean, res9: number) => AxisVisibleTicks, [import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, {
        chartDimensions: Dimensions;
        leftMargin: number;
    }>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, import("../../../..").Theme>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, import("../../../..").SettingsSpec>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, import("../../utils/specs").AxisSpec[]>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, Map<string, import("../../utils/axis_utils").AxisTicksDimensions>>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, import("../utils").SeriesDomainsAndData>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, number>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, boolean>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, number>]>;
    removeMatchingSelector: (state: import("../../../../state/chart_state").GlobalChartState, ...args: any[]) => void;
    clearCache: () => void;
    cache: import("re-reselect").ICacheObject;
    keySelector: import("re-reselect").KeySelector<import("../../../../state/chart_state").GlobalChartState>;
};
export {};
