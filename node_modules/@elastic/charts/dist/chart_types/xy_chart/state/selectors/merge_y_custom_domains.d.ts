import { AxisSpec, DomainRange, Rotation } from '../../utils/specs';
export declare const mergeYCustomDomainsByGroupIdSelector: import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, Map<string, DomainRange>> & {
    resultFunc: (res1: AxisSpec[], res2: import("../../../..").SettingsSpec) => Map<string, DomainRange>;
    dependencies: [import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, AxisSpec[]>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, import("../../../..").SettingsSpec>];
    recomputations: () => number;
    resetRecomputations: () => number;
} & {
    getMatchingSelector: (state: import("../../../../state/chart_state").GlobalChartState, ...args: any[]) => import("re-reselect").OutputSelector<import("../../../../state/chart_state").GlobalChartState, Map<string, DomainRange>, (res1: AxisSpec[], res2: import("../../../..").SettingsSpec) => Map<string, DomainRange>, [import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, AxisSpec[]>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, import("../../../..").SettingsSpec>]>;
    removeMatchingSelector: (state: import("../../../../state/chart_state").GlobalChartState, ...args: any[]) => void;
    clearCache: () => void;
    cache: import("re-reselect").ICacheObject;
    keySelector: import("re-reselect").KeySelector<import("../../../../state/chart_state").GlobalChartState>;
};
export declare function mergeYCustomDomainsByGroupId(axesSpecs: AxisSpec[], chartRotation: Rotation): Map<string, DomainRange>;
