import { SeriesDomainsAndData } from '../utils';
import { GlobalChartState } from '../../../../state/chart_state';
export declare const computeSeriesDomainsSelector: import("re-reselect").Selector<GlobalChartState, SeriesDomainsAndData> & {
    resultFunc: (res1: import("../../utils/specs").BasicSeriesSpec[], res2: Map<string, import("../../utils/specs").DomainRange>, res3: import("../../utils/series").SeriesIdentifier[], res4: import("../../../..").SettingsSpec) => SeriesDomainsAndData;
    dependencies: [import("re-reselect").Selector<GlobalChartState, import("../../utils/specs").BasicSeriesSpec[]>, import("re-reselect").Selector<GlobalChartState, Map<string, import("../../utils/specs").DomainRange>>, import("re-reselect").Selector<GlobalChartState, import("../../utils/series").SeriesIdentifier[]>, import("re-reselect").Selector<GlobalChartState, import("../../../..").SettingsSpec>];
    recomputations: () => number;
    resetRecomputations: () => number;
} & {
    getMatchingSelector: (state: GlobalChartState, ...args: any[]) => import("re-reselect").OutputSelector<GlobalChartState, SeriesDomainsAndData, (res1: import("../../utils/specs").BasicSeriesSpec[], res2: Map<string, import("../../utils/specs").DomainRange>, res3: import("../../utils/series").SeriesIdentifier[], res4: import("../../../..").SettingsSpec) => SeriesDomainsAndData, [import("re-reselect").Selector<GlobalChartState, import("../../utils/specs").BasicSeriesSpec[]>, import("re-reselect").Selector<GlobalChartState, Map<string, import("../../utils/specs").DomainRange>>, import("re-reselect").Selector<GlobalChartState, import("../../utils/series").SeriesIdentifier[]>, import("re-reselect").Selector<GlobalChartState, import("../../../..").SettingsSpec>]>;
    removeMatchingSelector: (state: GlobalChartState, ...args: any[]) => void;
    clearCache: () => void;
    cache: import("re-reselect").ICacheObject;
    keySelector: import("re-reselect").KeySelector<GlobalChartState>;
};
