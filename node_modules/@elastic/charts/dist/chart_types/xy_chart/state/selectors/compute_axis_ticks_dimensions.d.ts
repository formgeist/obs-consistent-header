import { AxisTicksDimensions } from '../../utils/axis_utils';
export declare const computeAxisTicksDimensionsSelector: import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, Map<string, AxisTicksDimensions>> & {
    resultFunc: (res1: number, res2: boolean, res3: import("../../utils/specs").AxisSpec[], res4: import("../../../..").Theme, res5: import("../../../..").SettingsSpec, res6: import("../utils").SeriesDomainsAndData, res7: number) => Map<string, AxisTicksDimensions>;
    dependencies: [import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, number>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, boolean>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, import("../../utils/specs").AxisSpec[]>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, import("../../../..").Theme>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, import("../../../..").SettingsSpec>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, import("../utils").SeriesDomainsAndData>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, number>];
    recomputations: () => number;
    resetRecomputations: () => number;
} & {
    getMatchingSelector: (state: import("../../../../state/chart_state").GlobalChartState, ...args: any[]) => import("re-reselect").OutputSelector<import("../../../../state/chart_state").GlobalChartState, Map<string, AxisTicksDimensions>, (res1: number, res2: boolean, res3: import("../../utils/specs").AxisSpec[], res4: import("../../../..").Theme, res5: import("../../../..").SettingsSpec, res6: import("../utils").SeriesDomainsAndData, res7: number) => Map<string, AxisTicksDimensions>, [import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, number>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, boolean>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, import("../../utils/specs").AxisSpec[]>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, import("../../../..").Theme>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, import("../../../..").SettingsSpec>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, import("../utils").SeriesDomainsAndData>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, number>]>;
    removeMatchingSelector: (state: import("../../../../state/chart_state").GlobalChartState, ...args: any[]) => void;
    clearCache: () => void;
    cache: import("re-reselect").ICacheObject;
    keySelector: import("re-reselect").KeySelector<import("../../../../state/chart_state").GlobalChartState>;
};
