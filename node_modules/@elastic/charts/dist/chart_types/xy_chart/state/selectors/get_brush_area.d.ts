import { GlobalChartState } from '../../../../state/chart_state';
import { Dimensions } from '../../../../utils/dimensions';
export declare const getBrushAreaSelector: import("re-reselect").Selector<GlobalChartState, Dimensions | null> & {
    resultFunc: (res1: import("../../../../state/chart_state").PointerState | null, res2: import("../../../../utils/point").Point, res3: import("../../utils/specs").Rotation, res4: {
        chartDimensions: Dimensions;
        leftMargin: number;
    }) => Dimensions | null;
    dependencies: [import("re-reselect").Selector<GlobalChartState, import("../../../../state/chart_state").PointerState | null>, import("re-reselect").Selector<GlobalChartState, import("../../../../utils/point").Point>, import("re-reselect").Selector<GlobalChartState, import("../../utils/specs").Rotation>, import("re-reselect").Selector<GlobalChartState, {
        chartDimensions: Dimensions;
        leftMargin: number;
    }>];
    recomputations: () => number;
    resetRecomputations: () => number;
} & {
    getMatchingSelector: (state: GlobalChartState, ...args: any[]) => import("re-reselect").OutputSelector<GlobalChartState, Dimensions | null, (res1: import("../../../../state/chart_state").PointerState | null, res2: import("../../../../utils/point").Point, res3: import("../../utils/specs").Rotation, res4: {
        chartDimensions: Dimensions;
        leftMargin: number;
    }) => Dimensions | null, [import("re-reselect").Selector<GlobalChartState, import("../../../../state/chart_state").PointerState | null>, import("re-reselect").Selector<GlobalChartState, import("../../../../utils/point").Point>, import("re-reselect").Selector<GlobalChartState, import("../../utils/specs").Rotation>, import("re-reselect").Selector<GlobalChartState, {
        chartDimensions: Dimensions;
        leftMargin: number;
    }>]>;
    removeMatchingSelector: (state: GlobalChartState, ...args: any[]) => void;
    clearCache: () => void;
    cache: import("re-reselect").ICacheObject;
    keySelector: import("re-reselect").KeySelector<GlobalChartState>;
};
