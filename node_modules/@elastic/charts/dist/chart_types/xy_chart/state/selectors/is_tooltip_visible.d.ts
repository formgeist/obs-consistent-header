import { TooltipValue } from '../../utils/interactions';
import { Point } from '../../../../utils/point';
import { GlobalChartState, PointerStates } from '../../../../state/chart_state';
export declare const isTooltipVisibleSelector: import("re-reselect").Selector<GlobalChartState, boolean> & {
    resultFunc: (res1: "vertical" | "cross" | "follow" | "none" | undefined, res2: PointerStates, res3: Point, res4: TooltipValue[]) => boolean;
    dependencies: [import("re-reselect").Selector<GlobalChartState, "vertical" | "cross" | "follow" | "none" | undefined>, import("re-reselect").Selector<GlobalChartState, PointerStates>, import("re-reselect").Selector<GlobalChartState, Point>, import("re-reselect").Selector<GlobalChartState, TooltipValue[]>];
    recomputations: () => number;
    resetRecomputations: () => number;
} & {
    getMatchingSelector: (state: GlobalChartState, ...args: any[]) => import("re-reselect").OutputSelector<GlobalChartState, boolean, (res1: "vertical" | "cross" | "follow" | "none" | undefined, res2: PointerStates, res3: Point, res4: TooltipValue[]) => boolean, [import("re-reselect").Selector<GlobalChartState, "vertical" | "cross" | "follow" | "none" | undefined>, import("re-reselect").Selector<GlobalChartState, PointerStates>, import("re-reselect").Selector<GlobalChartState, Point>, import("re-reselect").Selector<GlobalChartState, TooltipValue[]>]>;
    removeMatchingSelector: (state: GlobalChartState, ...args: any[]) => void;
    clearCache: () => void;
    cache: import("re-reselect").ICacheObject;
    keySelector: import("re-reselect").KeySelector<GlobalChartState>;
};
