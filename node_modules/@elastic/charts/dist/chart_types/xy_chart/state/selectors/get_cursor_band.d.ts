import { Dimensions } from '../../../../utils/dimensions';
import { Point } from '../../../../utils/point';
import { SettingsSpec } from '../../../../specs/settings';
import { BasicSeriesSpec } from '../../utils/specs';
import { GlobalChartState } from '../../../../state/chart_state';
export declare const getCursorBandPositionSelector: import("re-reselect").Selector<GlobalChartState, (Dimensions & {
    visible: boolean;
}) | undefined> & {
    resultFunc: (res1: Point, res2: import("../../../../specs/settings").PointerOverEvent | import("../../../../specs/settings").PointerOutEvent | null, res3: {
        chartDimensions: Dimensions;
        leftMargin: number;
    }, res4: SettingsSpec, res5: import("../utils").ComputedGeometries, res6: BasicSeriesSpec[], res7: number, res8: boolean, res9: any[]) => (Dimensions & {
        visible: boolean;
    }) | undefined;
    dependencies: [import("re-reselect").Selector<GlobalChartState, Point>, import("re-reselect").Selector<GlobalChartState, import("../../../../specs/settings").PointerOverEvent | import("../../../../specs/settings").PointerOutEvent | null>, import("re-reselect").Selector<GlobalChartState, {
        chartDimensions: Dimensions;
        leftMargin: number;
    }>, import("re-reselect").Selector<GlobalChartState, SettingsSpec>, import("re-reselect").Selector<GlobalChartState, import("../utils").ComputedGeometries>, import("re-reselect").Selector<GlobalChartState, BasicSeriesSpec[]>, import("re-reselect").Selector<GlobalChartState, number>, import("re-reselect").Selector<GlobalChartState, boolean>, import("re-reselect").Selector<GlobalChartState, any[]>];
    recomputations: () => number;
    resetRecomputations: () => number;
} & {
    getMatchingSelector: (state: GlobalChartState, ...args: any[]) => import("re-reselect").OutputSelector<GlobalChartState, (Dimensions & {
        visible: boolean;
    }) | undefined, (res1: Point, res2: import("../../../../specs/settings").PointerOverEvent | import("../../../../specs/settings").PointerOutEvent | null, res3: {
        chartDimensions: Dimensions;
        leftMargin: number;
    }, res4: SettingsSpec, res5: import("../utils").ComputedGeometries, res6: BasicSeriesSpec[], res7: number, res8: boolean, res9: any[]) => (Dimensions & {
        visible: boolean;
    }) | undefined, [import("re-reselect").Selector<GlobalChartState, Point>, import("re-reselect").Selector<GlobalChartState, import("../../../../specs/settings").PointerOverEvent | import("../../../../specs/settings").PointerOutEvent | null>, import("re-reselect").Selector<GlobalChartState, {
        chartDimensions: Dimensions;
        leftMargin: number;
    }>, import("re-reselect").Selector<GlobalChartState, SettingsSpec>, import("re-reselect").Selector<GlobalChartState, import("../utils").ComputedGeometries>, import("re-reselect").Selector<GlobalChartState, BasicSeriesSpec[]>, import("re-reselect").Selector<GlobalChartState, number>, import("re-reselect").Selector<GlobalChartState, boolean>, import("re-reselect").Selector<GlobalChartState, any[]>]>;
    removeMatchingSelector: (state: GlobalChartState, ...args: any[]) => void;
    clearCache: () => void;
    cache: import("re-reselect").ICacheObject;
    keySelector: import("re-reselect").KeySelector<GlobalChartState>;
};
