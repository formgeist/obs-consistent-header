import { TooltipLegendValue } from '../../tooltip/tooltip';
export declare const getLegendTooltipValuesSelector: import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, Map<string, TooltipLegendValue>> & {
    resultFunc: (res: import("../../utils/interactions").TooltipValue[]) => Map<string, TooltipLegendValue>;
    dependencies: [import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, import("../../utils/interactions").TooltipValue[]>];
    recomputations: () => number;
    resetRecomputations: () => number;
} & {
    getMatchingSelector: (state: import("../../../../state/chart_state").GlobalChartState, ...args: any[]) => import("re-reselect").OutputSelector<import("../../../../state/chart_state").GlobalChartState, Map<string, TooltipLegendValue>, (res: import("../../utils/interactions").TooltipValue[]) => Map<string, TooltipLegendValue>, [import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, import("../../utils/interactions").TooltipValue[]>]>;
    removeMatchingSelector: (state: import("../../../../state/chart_state").GlobalChartState, ...args: any[]) => void;
    clearCache: () => void;
    cache: import("re-reselect").ICacheObject;
    keySelector: import("re-reselect").KeySelector<import("../../../../state/chart_state").GlobalChartState>;
};
