import { GlobalChartState } from '../../../../state/chart_state';
export declare const isBrushingSelector: import("re-reselect").Selector<GlobalChartState, boolean> & {
    resultFunc: (res1: boolean, res2: import("../../../../state/chart_state").PointerStates) => boolean;
    dependencies: [import("re-reselect").Selector<GlobalChartState, boolean>, import("re-reselect").Selector<GlobalChartState, import("../../../../state/chart_state").PointerStates>];
    recomputations: () => number;
    resetRecomputations: () => number;
} & {
    getMatchingSelector: (state: GlobalChartState, ...args: any[]) => import("re-reselect").OutputSelector<GlobalChartState, boolean, (res1: boolean, res2: import("../../../../state/chart_state").PointerStates) => boolean, [import("re-reselect").Selector<GlobalChartState, boolean>, import("re-reselect").Selector<GlobalChartState, import("../../../../state/chart_state").PointerStates>]>;
    removeMatchingSelector: (state: GlobalChartState, ...args: any[]) => void;
    clearCache: () => void;
    cache: import("re-reselect").ICacheObject;
    keySelector: import("re-reselect").KeySelector<GlobalChartState>;
};
