import { Dimensions } from '../../../../utils/dimensions';
export declare const computeChartDimensionsSelector: import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, {
    chartDimensions: Dimensions;
    leftMargin: number;
}> & {
    resultFunc: (res1: Dimensions, res2: import("../../../..").Theme, res3: Map<string, import("../../utils/axis_utils").AxisTicksDimensions>, res4: import("../../utils/specs").AxisSpec[]) => {
        chartDimensions: Dimensions;
        leftMargin: number;
    };
    dependencies: [import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, Dimensions>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, import("../../../..").Theme>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, Map<string, import("../../utils/axis_utils").AxisTicksDimensions>>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, import("../../utils/specs").AxisSpec[]>];
    recomputations: () => number;
    resetRecomputations: () => number;
} & {
    getMatchingSelector: (state: import("../../../../state/chart_state").GlobalChartState, ...args: any[]) => import("re-reselect").OutputSelector<import("../../../../state/chart_state").GlobalChartState, {
        chartDimensions: Dimensions;
        leftMargin: number;
    }, (res1: Dimensions, res2: import("../../../..").Theme, res3: Map<string, import("../../utils/axis_utils").AxisTicksDimensions>, res4: import("../../utils/specs").AxisSpec[]) => {
        chartDimensions: Dimensions;
        leftMargin: number;
    }, [import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, Dimensions>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, import("../../../..").Theme>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, Map<string, import("../../utils/axis_utils").AxisTicksDimensions>>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, import("../../utils/specs").AxisSpec[]>]>;
    removeMatchingSelector: (state: import("../../../../state/chart_state").GlobalChartState, ...args: any[]) => void;
    clearCache: () => void;
    cache: import("re-reselect").ICacheObject;
    keySelector: import("re-reselect").KeySelector<import("../../../../state/chart_state").GlobalChartState>;
};
