import { IndexedGeometry } from '../../../../utils/geometry';
export declare const getGeometriesIndexSelector: import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, Map<any, IndexedGeometry[]>> & {
    resultFunc: (res: import("../utils").ComputedGeometries) => Map<any, IndexedGeometry[]>;
    dependencies: [import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, import("../utils").ComputedGeometries>];
    recomputations: () => number;
    resetRecomputations: () => number;
} & {
    getMatchingSelector: (state: import("../../../../state/chart_state").GlobalChartState, ...args: any[]) => import("re-reselect").OutputSelector<import("../../../../state/chart_state").GlobalChartState, Map<any, IndexedGeometry[]>, (res: import("../utils").ComputedGeometries) => Map<any, IndexedGeometry[]>, [import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, import("../utils").ComputedGeometries>]>;
    removeMatchingSelector: (state: import("../../../../state/chart_state").GlobalChartState, ...args: any[]) => void;
    clearCache: () => void;
    cache: import("re-reselect").ICacheObject;
    keySelector: import("re-reselect").KeySelector<import("../../../../state/chart_state").GlobalChartState>;
};
