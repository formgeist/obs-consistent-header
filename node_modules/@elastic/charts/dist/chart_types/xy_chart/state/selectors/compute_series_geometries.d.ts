import { ComputedGeometries } from '../utils';
export declare const computeSeriesGeometriesSelector: import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, ComputedGeometries> & {
    resultFunc: (res1: import("../../../..").SettingsSpec, res2: import("../../utils/specs").BasicSeriesSpec[], res3: import("../utils").SeriesDomainsAndData, res4: Map<string, string>, res5: import("../../../..").Theme, res6: {
        chartDimensions: import("../../../../utils/dimensions").Dimensions;
        leftMargin: number;
    }, res7: import("../../utils/specs").AxisSpec[], res8: boolean) => ComputedGeometries;
    dependencies: [import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, import("../../../..").SettingsSpec>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, import("../../utils/specs").BasicSeriesSpec[]>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, import("../utils").SeriesDomainsAndData>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, Map<string, string>>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, import("../../../..").Theme>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, {
        chartDimensions: import("../../../../utils/dimensions").Dimensions;
        leftMargin: number;
    }>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, import("../../utils/specs").AxisSpec[]>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, boolean>];
    recomputations: () => number;
    resetRecomputations: () => number;
} & {
    getMatchingSelector: (state: import("../../../../state/chart_state").GlobalChartState, ...args: any[]) => import("re-reselect").OutputSelector<import("../../../../state/chart_state").GlobalChartState, ComputedGeometries, (res1: import("../../../..").SettingsSpec, res2: import("../../utils/specs").BasicSeriesSpec[], res3: import("../utils").SeriesDomainsAndData, res4: Map<string, string>, res5: import("../../../..").Theme, res6: {
        chartDimensions: import("../../../../utils/dimensions").Dimensions;
        leftMargin: number;
    }, res7: import("../../utils/specs").AxisSpec[], res8: boolean) => ComputedGeometries, [import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, import("../../../..").SettingsSpec>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, import("../../utils/specs").BasicSeriesSpec[]>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, import("../utils").SeriesDomainsAndData>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, Map<string, string>>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, import("../../../..").Theme>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, {
        chartDimensions: import("../../../../utils/dimensions").Dimensions;
        leftMargin: number;
    }>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, import("../../utils/specs").AxisSpec[]>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, boolean>]>;
    removeMatchingSelector: (state: import("../../../../state/chart_state").GlobalChartState, ...args: any[]) => void;
    clearCache: () => void;
    cache: import("re-reselect").ICacheObject;
    keySelector: import("re-reselect").KeySelector<import("../../../../state/chart_state").GlobalChartState>;
};
