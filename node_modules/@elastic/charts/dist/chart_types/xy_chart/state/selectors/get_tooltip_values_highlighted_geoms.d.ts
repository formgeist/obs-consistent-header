import { TooltipValue, TooltipValueFormatter } from '../../utils/interactions';
import { Point } from '../../../../utils/point';
import { ComputedScales } from '../utils';
import { IndexedGeometry } from '../../../../utils/geometry';
import { BasicSeriesSpec, AxisSpec, Rotation } from '../../utils/specs';
import { GlobalChartState } from '../../../../state/chart_state';
export interface TooltipAndHighlightedGeoms {
    tooltipValues: TooltipValue[];
    highlightedGeometries: IndexedGeometry[];
}
export declare const getTooltipValuesAndGeometriesSelector: import("re-reselect").Selector<GlobalChartState, TooltipAndHighlightedGeoms> & {
    resultFunc: (res1: BasicSeriesSpec[], res2: AxisSpec[], res3: Point, res4: Point, res5: Rotation, res6: boolean, res7: ComputedScales, res8: IndexedGeometry[], res9: "vertical" | "cross" | "follow" | "none", res10: import("../../../../specs").PointerOverEvent | import("../../../../specs").PointerOutEvent | null, res11: TooltipValueFormatter | undefined) => TooltipAndHighlightedGeoms;
    dependencies: [import("re-reselect").Selector<GlobalChartState, BasicSeriesSpec[]>, import("re-reselect").Selector<GlobalChartState, AxisSpec[]>, import("re-reselect").Selector<GlobalChartState, Point>, import("re-reselect").Selector<GlobalChartState, Point>, import("re-reselect").Selector<GlobalChartState, Rotation>, import("re-reselect").Selector<GlobalChartState, boolean>, import("re-reselect").Selector<GlobalChartState, ComputedScales>, import("re-reselect").Selector<GlobalChartState, IndexedGeometry[]>, import("re-reselect").Selector<GlobalChartState, "vertical" | "cross" | "follow" | "none">, import("re-reselect").Selector<GlobalChartState, import("../../../../specs").PointerOverEvent | import("../../../../specs").PointerOutEvent | null>, import("re-reselect").Selector<GlobalChartState, TooltipValueFormatter | undefined>];
    recomputations: () => number;
    resetRecomputations: () => number;
} & {
    getMatchingSelector: (state: GlobalChartState, ...args: any[]) => import("re-reselect").OutputSelector<GlobalChartState, TooltipAndHighlightedGeoms, (res1: BasicSeriesSpec[], res2: AxisSpec[], res3: Point, res4: Point, res5: Rotation, res6: boolean, res7: ComputedScales, res8: IndexedGeometry[], res9: "vertical" | "cross" | "follow" | "none", res10: import("../../../../specs").PointerOverEvent | import("../../../../specs").PointerOutEvent | null, res11: TooltipValueFormatter | undefined) => TooltipAndHighlightedGeoms, [import("re-reselect").Selector<GlobalChartState, BasicSeriesSpec[]>, import("re-reselect").Selector<GlobalChartState, AxisSpec[]>, import("re-reselect").Selector<GlobalChartState, Point>, import("re-reselect").Selector<GlobalChartState, Point>, import("re-reselect").Selector<GlobalChartState, Rotation>, import("re-reselect").Selector<GlobalChartState, boolean>, import("re-reselect").Selector<GlobalChartState, ComputedScales>, import("re-reselect").Selector<GlobalChartState, IndexedGeometry[]>, import("re-reselect").Selector<GlobalChartState, "vertical" | "cross" | "follow" | "none">, import("re-reselect").Selector<GlobalChartState, import("../../../../specs").PointerOverEvent | import("../../../../specs").PointerOutEvent | null>, import("re-reselect").Selector<GlobalChartState, TooltipValueFormatter | undefined>]>;
    removeMatchingSelector: (state: GlobalChartState, ...args: any[]) => void;
    clearCache: () => void;
    cache: import("re-reselect").ICacheObject;
    keySelector: import("re-reselect").KeySelector<GlobalChartState>;
};
export declare const getTooltipValuesSelector: import("re-reselect").Selector<GlobalChartState, TooltipValue[]> & {
    resultFunc: (res: TooltipAndHighlightedGeoms) => TooltipValue[];
    dependencies: [import("re-reselect").Selector<GlobalChartState, TooltipAndHighlightedGeoms>];
    recomputations: () => number;
    resetRecomputations: () => number;
} & {
    getMatchingSelector: (state: GlobalChartState, ...args: any[]) => import("re-reselect").OutputSelector<GlobalChartState, TooltipValue[], (res: TooltipAndHighlightedGeoms) => TooltipValue[], [import("re-reselect").Selector<GlobalChartState, TooltipAndHighlightedGeoms>]>;
    removeMatchingSelector: (state: GlobalChartState, ...args: any[]) => void;
    clearCache: () => void;
    cache: import("re-reselect").ICacheObject;
    keySelector: import("re-reselect").KeySelector<GlobalChartState>;
};
export declare const getHighlightedGeomsSelector: import("re-reselect").Selector<GlobalChartState, IndexedGeometry[]> & {
    resultFunc: (res: TooltipAndHighlightedGeoms) => IndexedGeometry[];
    dependencies: [import("re-reselect").Selector<GlobalChartState, TooltipAndHighlightedGeoms>];
    recomputations: () => number;
    resetRecomputations: () => number;
} & {
    getMatchingSelector: (state: GlobalChartState, ...args: any[]) => import("re-reselect").OutputSelector<GlobalChartState, IndexedGeometry[], (res: TooltipAndHighlightedGeoms) => IndexedGeometry[], [import("re-reselect").Selector<GlobalChartState, TooltipAndHighlightedGeoms>]>;
    removeMatchingSelector: (state: GlobalChartState, ...args: any[]) => void;
    clearCache: () => void;
    cache: import("re-reselect").ICacheObject;
    keySelector: import("re-reselect").KeySelector<GlobalChartState>;
};
