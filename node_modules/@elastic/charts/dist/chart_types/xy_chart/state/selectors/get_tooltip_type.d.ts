import { SettingsSpec } from '../../../../specs/settings';
export declare const getTooltipTypeSelector: import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, "vertical" | "cross" | "follow" | "none"> & {
    resultFunc: (res: SettingsSpec) => "vertical" | "cross" | "follow" | "none";
    dependencies: [import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, SettingsSpec>];
    recomputations: () => number;
    resetRecomputations: () => number;
} & {
    getMatchingSelector: (state: import("../../../../state/chart_state").GlobalChartState, ...args: any[]) => import("re-reselect").OutputSelector<import("../../../../state/chart_state").GlobalChartState, "vertical" | "cross" | "follow" | "none", (res: SettingsSpec) => "vertical" | "cross" | "follow" | "none", [import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, SettingsSpec>]>;
    removeMatchingSelector: (state: import("../../../../state/chart_state").GlobalChartState, ...args: any[]) => void;
    clearCache: () => void;
    cache: import("re-reselect").ICacheObject;
    keySelector: import("re-reselect").KeySelector<import("../../../../state/chart_state").GlobalChartState>;
};
