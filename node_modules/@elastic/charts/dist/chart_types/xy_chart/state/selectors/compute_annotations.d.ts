import { AnnotationDimensions } from '../../annotations/annotation_utils';
export declare const computeAnnotationDimensionsSelector: import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, Map<string, AnnotationDimensions>> & {
    resultFunc: (res1: import("../../utils/specs").AnnotationSpec[], res2: {
        chartDimensions: import("../../../../utils/dimensions").Dimensions;
        leftMargin: number;
    }, res3: import("../../../..").SettingsSpec, res4: import("../utils").ComputedGeometries, res5: import("../../utils/specs").AxisSpec[], res6: number, res7: boolean, res8: import("../../utils/specs").AxisSpec[]) => Map<string, AnnotationDimensions>;
    dependencies: [import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, import("../../utils/specs").AnnotationSpec[]>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, {
        chartDimensions: import("../../../../utils/dimensions").Dimensions;
        leftMargin: number;
    }>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, import("../../../..").SettingsSpec>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, import("../utils").ComputedGeometries>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, import("../../utils/specs").AxisSpec[]>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, number>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, boolean>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, import("../../utils/specs").AxisSpec[]>];
    recomputations: () => number;
    resetRecomputations: () => number;
} & {
    getMatchingSelector: (state: import("../../../../state/chart_state").GlobalChartState, ...args: any[]) => import("re-reselect").OutputSelector<import("../../../../state/chart_state").GlobalChartState, Map<string, AnnotationDimensions>, (res1: import("../../utils/specs").AnnotationSpec[], res2: {
        chartDimensions: import("../../../../utils/dimensions").Dimensions;
        leftMargin: number;
    }, res3: import("../../../..").SettingsSpec, res4: import("../utils").ComputedGeometries, res5: import("../../utils/specs").AxisSpec[], res6: number, res7: boolean, res8: import("../../utils/specs").AxisSpec[]) => Map<string, AnnotationDimensions>, [import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, import("../../utils/specs").AnnotationSpec[]>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, {
        chartDimensions: import("../../../../utils/dimensions").Dimensions;
        leftMargin: number;
    }>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, import("../../../..").SettingsSpec>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, import("../utils").ComputedGeometries>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, import("../../utils/specs").AxisSpec[]>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, number>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, boolean>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, import("../../utils/specs").AxisSpec[]>]>;
    removeMatchingSelector: (state: import("../../../../state/chart_state").GlobalChartState, ...args: any[]) => void;
    clearCache: () => void;
    cache: import("re-reselect").ICacheObject;
    keySelector: import("re-reselect").KeySelector<import("../../../../state/chart_state").GlobalChartState>;
};
