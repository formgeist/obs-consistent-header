import { Dimensions } from '../../../../utils/dimensions';
import { Point } from '../../../../utils/point';
import { SettingsSpec } from '../../../../specs/settings';
export declare const getOrientedProjectedPointerPositionSelector: import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, Point> & {
    resultFunc: (res1: Point, res2: {
        chartDimensions: Dimensions;
        leftMargin: number;
    }, res3: SettingsSpec) => Point;
    dependencies: [import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, Point>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, {
        chartDimensions: Dimensions;
        leftMargin: number;
    }>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, SettingsSpec>];
    recomputations: () => number;
    resetRecomputations: () => number;
} & {
    getMatchingSelector: (state: import("../../../../state/chart_state").GlobalChartState, ...args: any[]) => import("re-reselect").OutputSelector<import("../../../../state/chart_state").GlobalChartState, Point, (res1: Point, res2: {
        chartDimensions: Dimensions;
        leftMargin: number;
    }, res3: SettingsSpec) => Point, [import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, Point>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, {
        chartDimensions: Dimensions;
        leftMargin: number;
    }>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, SettingsSpec>]>;
    removeMatchingSelector: (state: import("../../../../state/chart_state").GlobalChartState, ...args: any[]) => void;
    clearCache: () => void;
    cache: import("re-reselect").ICacheObject;
    keySelector: import("re-reselect").KeySelector<import("../../../../state/chart_state").GlobalChartState>;
};
