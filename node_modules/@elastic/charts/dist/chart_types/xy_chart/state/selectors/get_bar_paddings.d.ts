export declare const getBarPaddingsSelector: import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, number> & {
    resultFunc: (res1: boolean, res2: import("../../../..").Theme) => number;
    dependencies: [import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, boolean>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, import("../../../..").Theme>];
    recomputations: () => number;
    resetRecomputations: () => number;
} & {
    getMatchingSelector: (state: import("../../../../state/chart_state").GlobalChartState, ...args: any[]) => import("re-reselect").OutputSelector<import("../../../../state/chart_state").GlobalChartState, number, (res1: boolean, res2: import("../../../..").Theme) => number, [import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, boolean>, import("re-reselect").Selector<import("../../../../state/chart_state").GlobalChartState, import("../../../..").Theme>]>;
    removeMatchingSelector: (state: import("../../../../state/chart_state").GlobalChartState, ...args: any[]) => void;
    clearCache: () => void;
    cache: import("re-reselect").ICacheObject;
    keySelector: import("re-reselect").KeySelector<import("../../../../state/chart_state").GlobalChartState>;
};
