import { LegendItem } from '../../legend/legend';
import { GlobalChartState } from '../../../../state/chart_state';
export declare const computeLegendSelector: import("re-reselect").Selector<GlobalChartState, Map<string, LegendItem>> & {
    resultFunc: (res1: import("../../utils/specs").BasicSeriesSpec[], res2: import("../utils").SeriesDomainsAndData, res3: import("../../../..").Theme, res4: Map<string, string>, res5: import("../../utils/specs").AxisSpec[], res6: import("../../utils/series").SeriesIdentifier[]) => Map<string, LegendItem>;
    dependencies: [import("re-reselect").Selector<GlobalChartState, import("../../utils/specs").BasicSeriesSpec[]>, import("re-reselect").Selector<GlobalChartState, import("../utils").SeriesDomainsAndData>, import("re-reselect").Selector<GlobalChartState, import("../../../..").Theme>, import("re-reselect").Selector<GlobalChartState, Map<string, string>>, import("re-reselect").Selector<GlobalChartState, import("../../utils/specs").AxisSpec[]>, import("re-reselect").Selector<GlobalChartState, import("../../utils/series").SeriesIdentifier[]>];
    recomputations: () => number;
    resetRecomputations: () => number;
} & {
    getMatchingSelector: (state: GlobalChartState, ...args: any[]) => import("re-reselect").OutputSelector<GlobalChartState, Map<string, LegendItem>, (res1: import("../../utils/specs").BasicSeriesSpec[], res2: import("../utils").SeriesDomainsAndData, res3: import("../../../..").Theme, res4: Map<string, string>, res5: import("../../utils/specs").AxisSpec[], res6: import("../../utils/series").SeriesIdentifier[]) => Map<string, LegendItem>, [import("re-reselect").Selector<GlobalChartState, import("../../utils/specs").BasicSeriesSpec[]>, import("re-reselect").Selector<GlobalChartState, import("../utils").SeriesDomainsAndData>, import("re-reselect").Selector<GlobalChartState, import("../../../..").Theme>, import("re-reselect").Selector<GlobalChartState, Map<string, string>>, import("re-reselect").Selector<GlobalChartState, import("../../utils/specs").AxisSpec[]>, import("re-reselect").Selector<GlobalChartState, import("../../utils/series").SeriesIdentifier[]>]>;
    removeMatchingSelector: (state: GlobalChartState, ...args: any[]) => void;
    clearCache: () => void;
    cache: import("re-reselect").ICacheObject;
    keySelector: import("re-reselect").KeySelector<GlobalChartState>;
};
