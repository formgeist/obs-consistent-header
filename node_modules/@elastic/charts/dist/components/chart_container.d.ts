import React from 'react';
import { BackwardRef } from '../state/chart_state';
import { onMouseUp, onMouseDown, onPointerMove } from '../state/actions/mouse';
import { SettingsSpec } from '../specs';
import { Stage } from 'react-konva';
interface ReactiveChartStateProps {
    initialized: boolean;
    isChartEmpty?: boolean;
    pointerCursor: string;
    isBrushing: boolean;
    isBrushingAvailable: boolean;
    settings?: SettingsSpec;
    internalChartRenderer: (containerRef: BackwardRef, forwardStageRef: React.RefObject<Stage>) => JSX.Element | null;
}
interface ReactiveChartDispatchProps {
    onPointerMove: typeof onPointerMove;
    onMouseUp: typeof onMouseUp;
    onMouseDown: typeof onMouseDown;
}
interface ReactiveChartOwnProps {
    getChartContainerRef: BackwardRef;
    forwardStageRef: React.RefObject<Stage>;
}
declare type ReactiveChartProps = ReactiveChartStateProps & ReactiveChartDispatchProps & ReactiveChartOwnProps;
declare class ChartContainerComponent extends React.Component<ReactiveChartProps> {
    static displayName: string;
    shouldComponentUpdate(nextProps: ReactiveChartProps): boolean;
    handleMouseMove: ({ nativeEvent: { offsetX, offsetY, timeStamp }, }: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
    handleMouseLeave: ({ nativeEvent: { timeStamp } }: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
    handleMouseDown: ({ nativeEvent: { offsetX, offsetY, timeStamp }, }: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
    handleMouseUp: ({ nativeEvent: { offsetX, offsetY, timeStamp } }: React.MouseEvent<HTMLDivElement, MouseEvent>) => void;
    handleBrushEnd: () => void;
    render(): JSX.Element;
}
export declare const ChartContainer: import("react-redux").ConnectedComponent<typeof ChartContainerComponent, Pick<ReactiveChartProps, "getChartContainerRef" | "forwardStageRef">>;
export {};
