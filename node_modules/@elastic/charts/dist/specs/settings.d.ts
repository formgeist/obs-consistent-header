/// <reference types="react" />
import { $Values } from 'utility-types';
import { DomainRange, Position, Rendering, Rotation } from '../chart_types/xy_chart/utils/specs';
import { PartialTheme, Theme } from '../utils/themes/theme';
import { Domain } from '../utils/domain';
import { TooltipType, TooltipValueFormatter } from '../chart_types/xy_chart/utils/interactions';
import { ScaleTypes } from '../utils/scales/scales';
import { Spec } from '.';
import { GeometryValue } from '../utils/geometry';
import { SeriesIdentifier } from '../chart_types/xy_chart/utils/series';
export declare type ElementClickListener = (elements: Array<[GeometryValue, SeriesIdentifier]>) => void;
export declare type ElementOverListener = (elements: Array<[GeometryValue, SeriesIdentifier]>) => void;
export declare type BrushEndListener = (min: number, max: number) => void;
export declare type LegendItemListener = (series: SeriesIdentifier | null) => void;
export declare type PointerUpdateListener = (event: PointerEvent) => void;
/**
 * Listener to be called when chart render state changes
 *
 * `isRendered` value is `true` when rendering is complete and `false` otherwise
 */
export declare type RenderChangeListener = (isRendered: boolean) => void;
export declare type BasicListener = () => undefined | void;
export declare const PointerEventType: Readonly<{
    Over: "Over";
    Out: "Out";
}>;
export declare type PointerEventType = $Values<typeof PointerEventType>;
export interface BasePointerEvent {
    chartId: string;
    type: PointerEventType;
}
/**
 * Event used to syncronize pointers/mouse positions between Charts.
 *
 * fired as callback argument for `PointerUpdateListener`
 */
export interface PointerOverEvent extends BasePointerEvent {
    type: typeof PointerEventType.Over;
    scale: ScaleTypes;
    /**
     * @todo
     * unit for event (i.e. `time`, `feet`, `count`, etc.)
     */
    unit?: string;
    value: number | string | null;
}
export interface PointerOutEvent extends BasePointerEvent {
    type: typeof PointerEventType.Out;
}
export declare type PointerEvent = PointerOverEvent | PointerOutEvent;
interface TooltipProps {
    type?: TooltipType;
    snap?: boolean;
    headerFormatter?: TooltipValueFormatter;
    unit?: string;
}
export interface SettingsSpec extends Spec {
    /**
     * Partial theme to be merged with base
     *
     * or
     *
     * Array of partial themes to be merged with base
     * index `0` being the hightest priority
     *
     * i.e. `[primary, secondary, tertiary]`
     */
    theme?: PartialTheme | PartialTheme[];
    /**
     * Full default theme to use as base
     *
     * @default `LIGHT_THEME`
     */
    baseTheme?: Theme;
    rendering: Rendering;
    rotation: Rotation;
    animateData: boolean;
    showLegend: boolean;
    /** Either a TooltipType or an object with configuration of type, snap, and/or headerFormatter */
    tooltip: TooltipType | TooltipProps;
    debug: boolean;
    legendPosition: Position;
    showLegendDisplayValue: boolean;
    /**
     * Removes duplicate axes
     *
     * Compares title, position and first & last tick labels
     */
    hideDuplicateAxes: boolean;
    onElementClick?: ElementClickListener;
    onElementOver?: ElementOverListener;
    onElementOut?: BasicListener;
    onBrushEnd?: BrushEndListener;
    onLegendItemOver?: LegendItemListener;
    onLegendItemOut?: BasicListener;
    onLegendItemClick?: LegendItemListener;
    onLegendItemPlusClick?: LegendItemListener;
    onLegendItemMinusClick?: LegendItemListener;
    onPointerUpdate?: PointerUpdateListener;
    onRenderChange?: RenderChangeListener;
    xDomain?: Domain | DomainRange;
    resizeDebounce?: number;
}
export declare type DefaultSettingsProps = 'id' | 'chartType' | 'specType' | 'rendering' | 'rotation' | 'resizeDebounce' | 'animateData' | 'showLegend' | 'debug' | 'tooltip' | 'showLegendDisplayValue' | 'theme' | 'legendPosition' | 'hideDuplicateAxes';
export declare const DEFAULT_TOOLTIP_TYPE: "vertical";
export declare const DEFAULT_TOOLTIP_SNAP = true;
export declare const SpecTypes: Readonly<{
    Series: "series";
    Axis: "axis";
    Annotation: "annotation";
    Settings: "settings";
}>;
export declare type SpecTypes = $Values<typeof SpecTypes>;
export declare const DEFAULT_SETTINGS_SPEC: SettingsSpec;
export declare type SettingsSpecProps = Partial<Omit<SettingsSpec, 'chartType' | 'specType' | 'id'>>;
export declare const Settings: React.FunctionComponent<SettingsSpecProps>;
export declare function isPointerOutEvent(event: PointerEvent | null | undefined): event is PointerOutEvent;
export declare function isPointerOverEvent(event: PointerEvent | null | undefined): event is PointerOverEvent;
export {};
