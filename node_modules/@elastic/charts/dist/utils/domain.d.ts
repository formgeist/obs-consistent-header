import { Accessor, AccessorFn } from './accessor';
import { ScaleType } from './scales/scales';
export declare type Domain = any[];
export interface SpecDomain {
    accessor: Accessor;
    level: number;
    domain: Domain;
    scaleType: ScaleType;
    isStacked?: boolean;
}
export interface ColorDomain {
    accessors: Accessor[];
    yAccessors?: Accessor[];
    domain: string[];
    scaleType: ScaleType;
}
export interface SeriesScales {
    groupLevel: number;
    xDomain: Domain;
    yDomain?: Domain;
    xScaleType: ScaleType;
    yScaleType?: ScaleType;
    xAccessor: Accessor;
    yAccessor?: Accessor;
}
export declare function computeOrdinalDataDomain(data: any[], accessor: AccessorFn, sorted?: boolean, removeNull?: boolean): string[] | number[];
export declare function computeDomainExtent(computedDomain: [number, number] | [undefined, undefined], scaleToExtent: boolean, fitToExtent?: boolean): [number, number];
export declare function computeContinuousDataDomain(data: any[], accessor: AccessorFn, scaleToExtent?: boolean, fitToExtent?: boolean): number[];
export declare function computeStackedContinuousDomain(data: any[], xAccessor: AccessorFn, yAccessor: AccessorFn, scaleToExtent?: boolean): any;
export declare type Datum = any;
