import { $Values } from 'utility-types';
export interface Scale {
    domain: any[];
    range: number[];
    ticks: () => any[];
    scale: (value: string | number) => number;
    pureScale: (value: any) => number;
    invert: (value: number) => any;
    invertWithStep: (value: number, data: any[]) => {
        value: any;
        withinBandwidth: boolean;
    } | null;
    isSingleValue: () => boolean;
    /** Check if the passed value is within the scale domain */
    isValueInDomain: (value: any) => boolean;
    bandwidth: number;
    bandwidthPadding: number;
    minInterval: number;
    type: ScaleType;
    /**
     * @todo
     * designates unit of scale to compare to other Chart axis
     */
    unit?: string;
    isInverted: boolean;
    barsPadding: number;
}
export declare type ScaleFunction = (value: any) => number;
/**
 * The scale type
 */
export declare const ScaleType: Readonly<{
    Linear: "linear";
    Ordinal: "ordinal";
    Log: "log";
    Sqrt: "sqrt";
    Time: "time";
}>;
export declare type ScaleType = $Values<typeof ScaleType>;
export interface ScaleConfig {
    accessor: (value: any) => any;
    domain: any[];
    type: ScaleType;
    clamp?: boolean;
}
export declare type ScaleContinuousType = typeof ScaleType.Linear | typeof ScaleType.Sqrt | typeof ScaleType.Log | typeof ScaleType.Time;
export declare type ScaleOrdinalType = typeof ScaleType.Ordinal;
export declare type ScaleTypes = ScaleContinuousType | ScaleOrdinalType;
