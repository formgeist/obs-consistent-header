export declare function identity<T>(value: T): T;
export declare function compareByValueAsc(firstEl: number, secondEl: number): number;
export declare function clamp(value: number, min: number, max: number): number;
/**
 * This function returns a function to generate ids.
 * This can be used to generate unique, but predictable ids to pair labels
 * with their inputs. It takes an optional prefix as a parameter. If you don't
 * specify it, it generates a random id prefix. If you specify a custom prefix
 * it should begin with an letter to be HTML4 compliant.
 */
export declare function htmlIdGenerator(idPrefix?: string): (suffix?: string | undefined) => string;
/**
 * Replaces all properties on any type as optional, includes nested types
 *
 * example:
 * ```ts
 * interface Person {
 *  name: string;
 *  age?: number;
 *  spouse: Person;
 *  children: Person[];
 * }
 * type PartialPerson = RecursivePartial<Person>;
 * // results in
 * interface PartialPerson {
 *  name?: string;
 *  age?: number;
 *  spouse?: RecursivePartial<Person>;
 *  children?: RecursivePartial<Person>[]
 * }
 * ```
 */
export declare type RecursivePartial<T> = {
    [P in keyof T]?: T[P] extends (infer U)[] ? RecursivePartial<U>[] : T[P] extends ReadonlyArray<infer U> ? ReadonlyArray<RecursivePartial<U>> : RecursivePartial<T[P]>;
};
export interface MergeOptions {
    mergeOptionalPartialValues?: boolean;
}
export declare function getPartialValue<T>(base: T, partial?: RecursivePartial<T>, partials?: RecursivePartial<T>[]): T;
/**
 * Returns all top-level keys from one or more objects
 * @param object - first object to get keys
 * @param objects
 */
export declare function getAllKeys(object: any, objects?: any[]): string[];
export declare function hasPartialObjectToMerge<T>(base: T, partial?: RecursivePartial<T>, additionalPartials?: RecursivePartial<T>[]): boolean;
export declare function shallowClone(value: any): any;
/**
 * Merges values of a partial structure with a base structure.
 *
 * @note No nested array merging
 *
 * @param base structure to be duplicated, must have all props of `partial`
 * @param partial structure to override values from base
 *
 * @returns new base structure with updated partial values
 */
export declare function mergePartial<T>(base: T, partial?: RecursivePartial<T>, options?: MergeOptions, additionalPartials?: RecursivePartial<T>[]): T;
export declare function isNumberArray(value: unknown): value is number[];
