import { $Values } from 'utility-types';
import { BarSeriesStyle, PointStyle, AreaStyle, LineStyle, ArcStyle } from './themes/theme';
import { SeriesIdentifier } from '../chart_types/xy_chart/utils/series';
/**
 * The accessor type
 */
export declare const BandedAccessorType: Readonly<{
    Y0: "y0";
    Y1: "y1";
}>;
export declare type BandedAccessorType = $Values<typeof BandedAccessorType>;
export interface GeometryValue {
    y: any;
    x: any;
    accessor: BandedAccessorType;
}
export declare type IndexedGeometry = PointGeometry | BarGeometry;
/**
 * Array of **range** clippings [x1, x2] to be excluded during rendering
 *
 * Note: Must be scaled **range** values (i.e. pixel coordinates) **NOT** domain values
 */
export declare type ClippedRanges = [number, number][];
export interface PointGeometry {
    x: number;
    y: number;
    radius: number;
    color: string;
    transform: {
        x: number;
        y: number;
    };
    seriesIdentifier: SeriesIdentifier;
    value: GeometryValue;
    styleOverrides?: Partial<PointStyle>;
}
export interface BarGeometry {
    x: number;
    y: number;
    width: number;
    height: number;
    color: string;
    displayValue?: {
        text: any;
        width: number;
        height: number;
        hideClippedValue?: boolean;
        isValueContainedInElement?: boolean;
    };
    seriesIdentifier: SeriesIdentifier;
    value: GeometryValue;
    seriesStyle: BarSeriesStyle;
}
export interface LineGeometry {
    line: string;
    points: PointGeometry[];
    color: string;
    transform: {
        x: number;
        y: number;
    };
    seriesIdentifier: SeriesIdentifier;
    seriesLineStyle: LineStyle;
    seriesPointStyle: PointStyle;
    /**
     * Ranges of `[x0, x1]` pairs to clip from series
     */
    clippedRanges: ClippedRanges;
}
export interface AreaGeometry {
    area: string;
    lines: string[];
    points: PointGeometry[];
    color: string;
    transform: {
        x: number;
        y: number;
    };
    seriesIdentifier: SeriesIdentifier;
    seriesAreaStyle: AreaStyle;
    seriesAreaLineStyle: LineStyle;
    seriesPointStyle: PointStyle;
    isStacked: boolean;
    /**
     * Ranges of `[x0, x1]` pairs to clip from series
     */
    clippedRanges: ClippedRanges;
}
export interface ArcGeometry {
    arc: string;
    color: string;
    seriesIdentifier: SeriesIdentifier;
    seriesArcStyle: ArcStyle;
    transform: {
        x: number;
        y: number;
    };
}
export declare function isPointGeometry(ig: IndexedGeometry): ig is PointGeometry;
export declare function isBarGeometry(ig: IndexedGeometry): ig is BarGeometry;
